BloneyNotifications = {};

BloneyNotifications.MainWnd = function(config){

	Ext.apply(this, config);
	
	this.store = new Ext.data.Store({
		proxy: new Ext.data.HttpProxy({
										url: '/notifications/show',
										method : 'GET'
										}),
		reader: new Ext.data.JsonReader({
					//root: 'notifications',
					//totalProperty: 'total',
					id: 'id'
				}, 
				[
					'notification_type',
					'user_id',
					'notification_status',
					{name: 'lastpost', mapping: 'last_update', type: 'date', dateFormat: 'timestamp'},
					'content'
        		]),
		remoteSort: false
	});
	
	  // Create RowActions Plugin
 	this.action = new Ext.ux.grid.RowActions({
		 //header:'Actions'
		 width:20
		 //,hideMode:'display'
		 ,actions:[{
				  iconCls:'icon-ok'
				 ,tooltip:'Confirm'
				 ,hide:false
		 	},{
				  iconCls:'icon-no'
				 ,tooltip:'Deny'
				 ,hide:false
			 }]
		 ,callbacks:{
				 'icon-ok':function(grid, record, action, row, col) {
					if(record.data.notification_status == null||
				 	   record.data.notification_status == 'COMPLETED'||
				 	   record.data.notification_status == 'REJECTED')
					{
						Ext.example.msg("Notifications", 'The choosen action could not be applied' );
					}
					else
					{
						Ext.Ajax.request({
						   url: '/notifications/' + record.id ,
						   method : 'PUT',
						   callback : function(options, success, response){
						   		if(success)
								{														
									Ext.example.msg("Notifications", '{0}.',response.notice );
									Ext.getCmp('notifications').loadRecords();
								}
								else
								{
									Ext.example.msg("Notifications", '{0}.',response.notice );	
								}
						   },
						   params: { content: record.data.content,
						   			notification_status : 'COMPLETED',
						   			user_id : record.data.user_id,
						   			notification_type : record.data.notification_type	}
						});
					}
				 },
				 'icon-no':function(grid, record, action, row, col) {
				 	if(record.data.notification_status == null ||
				 	   record.data.notification_status == 'REJECTED'||
				 	   record.data.notification_status == 'COMPLETED')
					{
						Ext.example.msg("Notifications", 'The choosen action could not be applied' );
					}
					else
					{	
						Ext.Ajax.request({
						url: '/notifications/' + record.id ,
						   method : 'PUT',
						   callback : function(options, success, response){
						   		if(success)
								{														
									Ext.example.msg("Notifications", '{0}.',response.notice );
									Ext.getCmp('notifications').loadRecords();
								}
								else
								{
									Ext.example.msg("Notifications", '{0}.',response.notice );	
								}
						   },
						   params: { content: record.data.content,
						   			notification_status : 'REJECTED',
						   			user_id : record.data.user_id,
						   			notification_type : record.data.notification_type	}
						});
					}	   
				 }
			}
		 });
  
		 // dummy action event handler - just outputs some arguments to console
		this.action.on({
			 action:function(grid, record, action, row, col) {
			 	//Ext.example.msg('Event: action', 'You have clicked row: <b>{0}</b>, action: <b>{1}</b> and notificationtype {2}', row, action,record.data.notification_type);
			 }
			 ,beforeaction:function() {
			 	//Ext.example.msg('Event: beforeaction', 'You can cancel the action by returning false from this event handler.');
			 }
		 }); 
	
	this.columns = [
			
			{
			   id: 'notification_type',
			   dataIndex: 'notification_type',
			   width: 250,
			   renderer: BloneyNotifications.Renderers.notification
			},{
			   dataIndex: 'user_id',
			   width: 100,
			   hidden: true
			},{
			   dataIndex: 'notification_status',
			   width: 70,
			   align: 'right'
			},
			this.action];

	var s_date = new Date();

	BloneyNotifications.MainWnd.superclass.constructor.call(this, {
		id:'notifications',
		region:'south',
		split:true,
		height: 110,
		collapsible: true,
		margins:'0 0 0 0',
		frame:true,
		header : false,
		loadMask: {msg:'Loading Notifications...'},
		sm: new Ext.grid.RowSelectionModel({
		    singleSelect:true
		}),
		trackMouseOver:false,
		listeners: {activate: this.handleActivate},
		viewConfig: {
			forceFit:true,
			enableRowBody:true,
			showPreview:true,
			autoExpandColumn: 'notificationid_type',
			getRowClass : function(record, rowIndex, p, ds){
				if(this.showPreview){
					p.body = '<p>'+record.data.content+'</p>';
					return 'x-grid3-row-expanded';
				}
				return 'x-grid3-row-collapsed';
			}
		},
		plugins:[this.action],
		bbar  : [{
					xtype:"textfield",
					name:"s_company",
					disabled : true,
					autoWidth : true,
					width : 200,
					emptyText : "Company : Bloney Ltd."
				},'-',{
					xtype:"textfield",
					name:"s_account",
					disabled : true,
					autoWidth : true,
					width : 200,
					emptyText : "Current Account : 832698"
				},'->',{
					xtype:"textfield",
					name:"s_alert",
					disabled : true,
					autoWidth : true,
					cls : 'alert_on',
					emptyText : "Accumulated Alert"
				},'-',{
					xtype:"textfield",
					name:"s_alert",
					disabled : true,
					autoWidth : true,
					emptyText : "Threshold Alert"
				},'-',{
					xtype:"textfield",
					name:"s_time",
					id : 'clock',
					disabled : true,
					autoWidth : true,
					cls : 'alert_time'
				}]
	});
	
	this.taskRunner = new Ext.util.TaskRunner();
	this.clock_task = {
	    run: function(){
	      	Ext.getCmp('clock').setValue(new Date().format('Y-m-d g:i:s A'));
	    },
	    interval: 1000 //1 second
	}
	
	this.notification_task = {
		run: function(){
			
			Ext.getCmp('notifications').loadRecords();
		},
		interval: config.notification_timeout//150000
	}
	this.currentNotificationStatus = 'ACTIVE';
	this.on('rowcontextmenu', this.onContextClick, this);
};

Ext.extend(BloneyNotifications.MainWnd, Ext.grid.GridPanel ,{
	loadRecords : function(next) {
		this.store.baseParams = {
			notification_status: this.currentNotificationStatus,
			next : (next == null ? 'ASC' : 'DESC'),
			format : 'json'
		};
		
		this.store.load();
	},
	
	startTasks : function(){
			
		this.taskRunner.start(this.clock_task);
		this.taskRunner.start(this.notification_task);
	},
	
	setTimeout :  function(timeout){
		this.taskRunner.stop(this.notification_task);
		this.notification_task.interval = timeout;
		this.taskRunner.start(this.notification_task);
	},
	
	handleActivate : function(tab){
		this.loadRecords();
		tab.doLayout();
	},

	onContextClick : function(grid, index, e){
	        if(!this.menu){ // create context menu on first right click
	            this.menu = new Ext.menu.Menu({
	                id:'notigrid-ctx',
	                items: [
					// stick any markup in a menu
		            '<b class="x-toolbar x-small-editor">Notifications Context</b>',
		            '-',{
		                text: 'Timeout',
		                menu: {
		                    items: [
		                        // stick any markup in a menu
		                        '<b class="x-toolbar x-small-editor">Timeout</b>','-',
		                        {
		                            text: '10 sec',
		                            group: 'timeout',
		                            handler: function() {
		                            	Ext.getCmp('notifications').setTimeout(10000);
		                            }
		                        },{
		                            text: '20 sec',
		                            group: 'timeout',
		                            handler: function() {
		                            	Ext.getCmp('notifications').setTimeout(20000);
		                            }
		                        },{
		                            text: '50 sec',
		                            group: 'timeout',
		                            handler: function() {
		                            	Ext.getCmp('notifications').setTimeout(50000);
		                            }
		                        },{
		                            text: '1 min',
		                            group: 'timeout',
		                            handler: function() {
		                            	Ext.getCmp('notifications').setTimeout(60000);
		                            }
		                       },{
		                            text: '10 min',
		                            group: 'timeout',
		                            handler: function() {
		                            	Ext.getCmp('notifications').setTimeout(600000);
		                            }
		                       },{
		                            text: '30 min',
		                            group: 'timeout',
		                            handler: function() {
		                            	Ext.getCmp('notifications').setTimeout(1800000);
		                            }
		                       }]
		                }
		            },{  
		                text: 'Filter',
		                menu: {
		                    items: [
		                        // stick any markup in a menu
		                        '<b class="x-toolbar x-small-editor">Filter</b>','-',
		                        {
		                            text: 'Active',
		                            group: 'filter',
		                            handler: function() {
		                            	Ext.getCmp('notifications').currentNotificationStatus = 'ACTIVE';
		                            	Ext.getCmp('notifications').loadRecords();
		                            }
		                        },{
		                            text: 'Completed',
		                            group: 'filter',
		                            handler: function() {
		                            	Ext.getCmp('notifications').currentNotificationStatus = 'COMPLETED';
		                            	Ext.getCmp('notifications').loadRecords();
		                            }
		                        },{
		                            text: 'Rejected',
		                            group: 'filter',
		                            handler: function() {
		                            	Ext.getCmp('notifications').currentNotificationStatus = 'REJECTED';
		                            	Ext.getCmp('notifications').loadRecords();
		                            }
		                        },{
		                            text: 'Pending',
		                            group: 'filter',
		                            handler: function() {
		                            	Ext.getCmp('notifications').currentNotificationStatus = 'PENDING';
		                            	Ext.getCmp('notifications').loadRecords();
		                            }
		                        }]
		                }
		            },{  
		                text: 'Navigate',
		                menu: {
		                    items: [
		                        // stick any markup in a menu
		                        '<b class="x-toolbar x-small-editor">Navigate</b>','-',
		                        {
		                            text: 'Next',
		                            group: 'navigate',
		                            handler: function() {
		                            	Ext.getCmp('notifications').loadRecords();
		                            }
		                        },{
		                            text: 'Previous',
		                            group: 'navigate',
		                            handler: function() {
		                            	Ext.getCmp('notifications').loadRecords(1);
		                            }
		                        }]
		                }
		            }, {
		                text: 'Post Notification',
		                handler: function() {     
		                   var notificationCommmentWnd = new BloneyNotifications.CommentWnd();
						   notificationCommmentWnd.show();
		                }
		            }]
	            });
	            this.menu.on('hide', this.onContextHide, this);
	        }
	        e.stopEvent();
	        if(this.ctxRow){
	            Ext.fly(this.ctxRow).removeClass('x-node-ctx');
	            this.ctxRow = null;
	        }
	        this.ctxRow = this.view.getRow(index);
	        this.ctxRecord = this.store.getAt(index);
	        Ext.fly(this.ctxRow).addClass('x-node-ctx');
	        this.menu.showAt(e.getXY());
    	},

	onContextHide : function(){
		if(this.ctxRow){
			Ext.fly(this.ctxRow).removeClass('x-node-ctx');
			this.ctxRow = null;
		}
	}
});

BloneyNotifications.Renderers = {
    notification : function(value, p, record){
        var retString;
        if(record.data.notification_status == null)
        {
        	retString = String.format(
	                '<div class="topic"><b>{0}</b><span class="author"></span></div>',
	                value, record.id, record.data.notification_type);
        }
        else
        {
	        retString = String.format(
	                '<div class="topic"><b>{0}</b><span class="author"> received from: {1}</span></div>',
	                value, record.data.user_id, record.id, record.data.notification_type);
        }
        return retString;
    }
};

BloneyNotifications.CommentWnd = function(config){

	Ext.apply(this, config);
	
	this.comapnieslist = new Ext.data.Store({
		proxy: new Ext.data.HttpProxy({url: '/customers/comapanies_list', method: 'GET'}),
		reader: new Ext.data.JsonReader({
				//id: 'id'
			}, [
				'id',
				'customer_name'		
			]),
		remoteSort: false
	});
	this.comapnieslist.baseParams = {format : 'json'};
	this.comapnieslist.load();
	
	this.notificationform =  new Ext.FormPanel({
        labelWidth: 80,
		url: '/notifications/index',
		frame:true,
		defaultType: 'textfield',
		region: 'center',
        split: true,
        //collapsible: true,
       	id : 'notificationform',
        items: [
	        	{
				xtype:'fieldset',
				title: 'Notification Details',
				autoHeight:true,
				//collapsible: true,
				items :[{
		            layout:'column',
		            border:false,
		            items:[{
		                columnWidth:.5,
		                layout: 'form',
		                border:false,
		                defaults: {width: 150},
		                items: [
		                		{
									xtype:"combo",
									fieldLabel:"Sent to ",
									width : 150,
									store: this.comapnieslist,
									displayField:'customer_name',
									valueField: 'id',
									hiddenName: 'idId',
									typeAhead: true,
									id:'notifycompany',
									mode: 'local',
									triggerAction: 'all',
									emptyText:'Select a company ...',
									selectOnFocus:true,
									allowBlank:false
								}]
		            },{
		                columnWidth:.5,
		                layout: 'form',
		                border:false,
		                defaults: {width: 200},
		                items: [{
								xtype:"combo",
								fieldLabel:"Type",
								width : 150,
								store: new Ext.data.SimpleStore({
										fields: ['notification_type', 'notification_typedesc'],
										data : [['MESSAGE','Message'],
												['COLLABORATE','Collaborate']]
								}),
								displayField:'notification_typedesc',
								valueField: 'notification_type',
								hiddenName: 'notification_typeId',
								id : 'notification_type',
								typeAhead: true,
								mode: 'local',
								triggerAction: 'all',
								emptyText:'Notification type...',
								selectOnFocus:true
							},{
								xtype:"combo",
								fieldLabel:"Status",
								width : 150,
								store: new Ext.data.SimpleStore({
										fields: ['notification_status', 'notification_statusdesc'],
										data : [['ACTIVE','Active'],
												['PENDING','Pending'],
												['COMPLETED','Completed'],
												['REJECTED','Rejected']]
								}),
								displayField:'notification_statusdesc',
								valueField: 'notification_status',
								hiddenName: 'notification_statusId',
								id : 'notification_status',
								typeAhead: true,
								mode: 'local',
								triggerAction: 'all',
								emptyText:'Notification status...',
								selectOnFocus:true
							}]
	            }]
        	}]},{
                cls:'x-plain',
                title:'Note',
                layout:'fit',
                height : 195,
				//autoHeight : true,
                xtype : 'panel',
                items: {
                    xtype:'htmleditor',
                    id:'notification_editor'
                } 
       
        }]
    });
	
	Ext.getCmp('notification_type').setValue('COLLABORATE');
	Ext.getCmp('notification_status').setValue('ACTIVE');
	
	BloneyNotifications.CommentWnd.superclass.constructor.call(this, {
		title: 'Notifications',
		id: 'wndnotificationcomment',
		width : 570,
		height : 380,
		modal : true,
        items: [this.notificationform],
		buttons: [{
				text: 'Post Notification',
				handler : function() {
					Ext.Ajax.request({
					   url: '/notifications/',
					   method : 'POST',
					   callback : function(options, success, response){
					   		if(success)
							{														
								Ext.example.msg("Notifications", '{0}.',response.notice );
								Ext.getCmp('notifications').loadRecords(response.notification_id);
							}
							else
							{
								Ext.example.msg("Notifications", '{0}.',response.notice );	
							}
					   },
					   params: { notification_type : Ext.getCmp('notification_type').getValue() ,
					   			 notification_editor : Ext.getCmp('notification_editor').getValue() , 
					   			 notification_status : Ext.getCmp('notification_status').getValue()}
					});
					
					Ext.getCmp('wndnotificationcomment').close();
				}
			},{
				text: 'Close Notifications Window',
				handler : function() {
					Ext.getCmp('wndnotificationcomment').close();
				}
			}]
		});
	
	
};

Ext.extend(BloneyNotifications.CommentWnd, Ext.Window ,{
	handleActivate : function(tab){
		tab.doLayout();		
	}
});