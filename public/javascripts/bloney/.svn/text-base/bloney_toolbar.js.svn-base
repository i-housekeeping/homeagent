// -------------------------------------
// Bloney Toolbar Global Window Setup
// --------------------------------------
var toolbarconfig = {	
				maximizable : true,
				collapsible : true,
				width : 920,
				height : 550,
				border : true,
				plain : true,
				shadow : true,
				layout : 'border',
				xbloney : 'default',
				closable:true,
				resizable : true,
				split : true
			};

// ---------------------------------
// Bloney Splash 
// ---------------------------------
BloneySplash = {};
			
BloneySplash.MainWnd = function(config) {
	
	Ext.apply(this, config);

	this.logo = new Ext.Panel({
		id: 'welcome-logo',
		region: 'center',
		html : '<div id="header-content"><h2 id="slogan">SOCIAL CASHFLOW</h2><h1 id="logo-text">Bloney</h1><div id="home"><div id="formhome"></div></div></div>'
	});

	this.southregion = new Ext.Panel({
	
		baseCls: 'x-plain',
		bodyStyle:'padding-left:50px',
		frame: false,
		id: 'welcome-form',
		xtype : 'border',
		region: 'south',
		height: 100,
		html: '<h1>Bloney Cashflow</h1></br><p>version 0.1</br> Copyright 2008. Blogtery Corporation. All rights reserved</br>Thanks, The Bloney Cashflow Team</p>'
		});
	
	
	
	BloneySplash.MainWnd.superclass.constructor.call(this, {
		title : 'Bloney Cashflow',
		id: 'welcome-win',
		maximizable : false,
		minimizable : false,
		width : 570,
		height : 330,
		border : true,
		plain : true,
		shadow : true,
		layout : 'border',
		xbloney : 'default',
		closable:true,
		resizable : false,
		split : true,
		buttonAlign : 'center',
		items : [this.logo
				,this.southregion],
		buttons : [
					{
					text : 'OK',
					scope : 'BloneySplashWnd',
					handler : function(){
						Ext.getCmp('welcome-win').close();	
					}
				}		
		]
	});
};
Ext.extend(BloneySplash.MainWnd, Ext.Window, {
	
});
// ---------------------------------
// Bloney People
// ---------------------------------
BloneyPeople = {};

BloneyPeople.PeopleGrid = function(config){
	Ext.apply(this, config);

	this.store = new Ext.data.Store({
		proxy: new Ext.data.HttpProxy({url: '/authorize/user_list', method: 'GET'}),
		reader: new Ext.data.JsonReader({
				id: 'id'
			}, [
				'id',
				'login',
				'email',
				'role',
				'domain',
				'active'				
			]),
		remoteSort: false
	});

	if(config.checkbox == true)				
	{
		this.selmodel = new Ext.grid.CheckboxSelectionModel({singleSelect:false});
		this.columns = [this.selmodel,{
				   id: 'login',
				   header: "Login",
				   dataIndex: 'login',
				   width: 120
				},{
				   header: "email",
				   dataIndex: 'email',
				   width: 150
				},{
				   header: "Role",
				   dataIndex: 'role',
				   width: 80
				},{
				   header: "Domain",
				   dataIndex: 'domain',
				   width: 80
				},{
				   header: "Activated",
				   dataIndex: 'active',
				   width: 80
				}];
	}
	else
	{
		this.selmodel = new Ext.grid.RowSelectionModel({
					singleSelect:true
			});
		this.columns = [{
				   id: 'login',
				   header: "Login",
				   dataIndex: 'login',
				   width: 120
				},{
				   header: "email",
				   dataIndex: 'email',
				   width: 150
				},{
				   header: "Role",
				   dataIndex: 'role',
				   width: 80
				},{
				   header: "Domain",
				   dataIndex: 'domain',
				   width: 80
				},{
				   header: "Activated",
				   dataIndex: 'active',
				   width: 80
				}];
	}

	BloneyPeople.PeopleGrid.superclass.constructor.call(this, {
		
		loadMask: {msg:'Loading People...'},

		sm: new Ext.grid.RowSelectionModel({
			singleSelect:true
		}),

		viewConfig: {
			forceFit:true,
			enableRowBody:true,
			showPreview:true,
			autoExpandColumn: 'email'
		}
	});

	this.on('rowcontextmenu', this.onContextClick, this);
	this.on('rowclick', this.onRowClick, this);	
};

Ext.extend(BloneyPeople.PeopleGrid,Ext.grid.GridPanel,{
	
	onRowClick : function(grid, rowIndex, e){
		var record = grid.getStore().getAt(rowIndex);  // Get the Record
        Ext.getCmp('peopleform').form.setValues( [
        							  {id:'id', value:record.data.id},
        							  {id:'plogin_name', value:record.data.login},
									  {id:'titleId', value:record.data.role},
									  {id:'domainId', value:record.data.domain},
									  {id:'pemail', value:record.data.email},
									  {id:'ppassword', value:record.data.email},
									  {id:'pconfirm', value:record.data.email}]);
	},
 	onContextClick : function(grid, index, e){
	        if(!this.menu){ // create context menu on first right click
	            this.menu = new Ext.menu.Menu({
	                id:'grid-ctx',
	                items: [
					// stick any markup in a menu
		            '<b class="x-toolbar x-small-editor">Filter People Context</b>',
		            '-',{
		                text: 'Filter',
		                menu: {// <-- submenu by nested config object
		                    items: [
		                        // stick any markup in a menu
		                        '<b class="x-toolbar x-small-editor">Filter</b>','-',
		                        {
		                            text: 'by Name',
		                            checked: true,
		                            group: 'filter',
		                            checkHandler: this.onItemCheck
		                        },{
		                            text: 'by Role',
		                            group: 'filter',
		                            checkHandler: this.onItemCheck
		                        }]
		                }
		            }]
	            });
	            this.menu.on('hide', this.onContextHide, this);
	        }
	        e.stopEvent();
	        if(this.ctxRow){
	            Ext.fly(this.ctxRow).removeClass('x-node-ctx');
	            this.ctxRow = null;
	        }
	        this.ctxRow = this.view.getRow(index);
	        this.ctxRecord = this.store.getAt(index);
	        Ext.fly(this.ctxRow).addClass('x-node-ctx');
	        this.menu.showAt(e.getXY());
    },

	onContextHide : function(){
	        if(this.ctxRow){
	            Ext.fly(this.ctxRow).removeClass('x-node-ctx');
	            this.ctxRow = null;
	        }
    },

    loadRecords : function(role_type) {
		
    	this.store.baseParams = {
			format: 'json',
			role_type : role_type
		};
        this.store.load();
    },
    
    onItemCheck : function(item, checked) {
    	Ext.Msg.alert('onItemCheck', 'The Settings tool was clicked.');
    }
});

BloneyPeople.CollaborateWnd = function(config){
	
	Ext.apply(this, config);
	
	this.comapniessharelist = new Ext.data.Store({
		proxy: new Ext.data.HttpProxy({url: '/customers/comapanies_sharelist', method: 'GET'}),
		reader: new Ext.data.JsonReader({
				//id: 'id'
			}, [
				'company_name'		
			]),
		remoteSort: false
	});
	this.comapniessharelist.baseParams = {format : 'json'};
	this.comapniessharelist.load();
	
	this.expertssharelist = new Ext.data.Store({
		proxy: new Ext.data.HttpProxy({url: '/customers', method: 'GET'}),
		reader: new Ext.data.JsonReader({
				//id: 'id'
			}, [
				'customer_name'		
			]),
		remoteSort: false
	});
	this.expertssharelist.baseParams = {format : 'json', 
										customer_type:'EXPERT',
										customer_name: '',
										customer_city: '',
										customer_country: '',
										fields : 'customer_name'};
	this.expertssharelist.load();
	
	this.comboExpertssharelist = new Ext.form.ComboBox({
							//fieldLabel:"Comapnies list",
							width : 140,
							store: this.expertssharelist,
							displayField:'customer_name',
							valueField: 'customer_name',
							hiddenName: 'customer_name',
							typeAhead: true,
							id:'ps_customer_name',
							mode: 'local',
							triggerAction: 'all',
							emptyText:'Expert Name...',
							selectOnFocus:true,
							allowBlank:true
					});
	this.comboExpertssharelist.on('select', this.onSelectET, this);
	
		
	this.postcustomers = new BloneyPeople.PeopleGrid({
						id: 'postpeople',
						title: 'Publish People Directory',
						height: (config.height - 95),
						listeners: {activate: this.handleActivate},
						checkbox : true,
						bbar: ['->',this.comboExpertssharelist,'-',{
								text : 'Share with Expert',
								handler : function() {
									var selItems = Ext.getCmp('postcustomers').getSelectionModel().getSelections();
									var itemsList = "";
									for(var i = 0, n = selItems.length; i < n; i++) {
								     	itemsList = ((itemsList == "") ? "" : (itemsList + ",") ) + selItems[i].id								     	
								    }
								    if (itemsList != "" && Ext.getCmp('ps_customer_name').getValue() != "" )
								    {
								    	Ext.Ajax.request({
								    	   url: '/authorize/postdirectory',
										   method : 'GET',
										   success: function(){
										   		Ext.Msg.alert('Post People Directory', 'People directory posted sucessfully');
										   },
										   failure: function(){
										   		Ext.Msg.alert('Post People Directory', 'People directory posted failed');
										   },
										   params: {items_list : itemsList,
										   			share : false,
										   			expert_name : Ext.getCmp('ps_customer_name').getValue()}
										});
								    }
								}
						},'-',{
								text : 'Publish Directory',
								handler : function() {
									var selItems = Ext.getCmp('postcustomers').getSelectionModel().getSelections();
									var itemsList = "";
									for(var i = 0, n = selItems.length; i < n; i++) {
								     	itemsList = ((itemsList == "") ? "" : (itemsList + ",") ) + selItems[i].id								     	
								    }
									if (itemsList != "")
								    {
									    Ext.Ajax.request({
									    	   url: '/authorize/postdirectory',
											   method : 'GET',
											   success: function(){
											   		Ext.Msg.alert('Post People Directory', 'People directory posted sucessfully');
											   },
											   failure: function(){
											   		Ext.Msg.alert('Post People Directory', 'People directory posted failed');
											   },
											   params: {items_list : itemsList,
											   			share : true}
											});
								    }
								}
						},'-',new Ext.SplitButton({
								id: 'cleandirectory', 
							   	text: 'Clean All Directories',
							   	handler: function() {
							   				Ext.Ajax.request({
									    	   url: '/authorize/cleandirectory',
											   method : 'GET',
											   success: function(){
											   		Ext.Msg.alert('Clean People Directory', 'People directory cleaned sucessfully');
											   },
											   failure: function(){
											   		Ext.Msg.alert('Clean People Directory', 'People directory cleaned failed');
											   },
											   params: { share_type : 'ALL'}
											});}, // handle a click on the button itself
							   	menu: new Ext.menu.Menu({
							        items: [
							        	// these items will render as dropdown menu items when the arrow is clicked:
								        {
									        text: 'Clean Shared Directory', 
									        handler: function() {
									        	Ext.Ajax.request({
										    	   url: '/authorize/cleandirectory',
												   method : 'GET',
												   success: function(){
												   		Ext.Msg.alert('Clean People Directory', 'People directory cleaned sucessfully');
												   },
												   failure: function(){
												   		Ext.Msg.alert('Clean People Directory', 'People directory cleaned failed');
												   },
												   params: { share_type : 'PUBLIC'}
												});
									        	
									        }
								        },{
									        text: 'Clean People Directory', 
									        handler: function() {
										        Ext.Ajax.request({
										    	   url: '/authorize/cleandirectory',
												   method : 'GET',
												   success: function(){
												   		Ext.Msg.alert('Clean People Directory', 'People directory cleaned sucessfully');
												   },
												   failure: function(){
												   		Ext.Msg.alert('Clean People Directory', 'People directory cleaned failed');
												   },
												   params: { share_type : 'PRIVATE'}
												});
									        }
								        }
							        ]
							   	})
							})]
	});
	this.postcustomers.on('rowclick', this.postcustomers.onRowClick, this.postcustomers);
	
	this.adoptcustomers = new BloneyPeople.PeopleGrid({
						id: 'adoptcustomers',
						title: 'Customers list',
						checkbox : true,
						height: (config.height - 160),
						listeners: {activate: this.handleActivate}
	});
	this.adoptcustomers.on('rowclick', this.adoptcustomers.onRowClick, this.adoptcustomers);
	
	this.adoptcustomersfrm = new Ext.FormPanel({
		frame:true,
		id : 'adoptcustfrm',
		title: 'Adopt People Directory',
		//height : 290,
		autoHeight : true,
		listeners: {activate: this.handleActivate},
		items:[
				{
					xtype:"hidden",
					id:'adoptcustomersfrm_id'
				},{
					xtype:"combo",
					fieldLabel:"Comapnies list",
					width : 200,
					store: this.comapniessharelist,
					displayField:'company_name',
					valueField: 'company_name',
					hiddenName: 'company_nameId',
					typeAhead: true,
					id:'cs_company_name',
					mode: 'local',
					triggerAction: 'all',
					emptyText:'Select a comapny ...',
					selectOnFocus:true,
					allowBlank:true
				},
				this.adoptcustomers
		  ],
		  bbar:['->',{	xtype:"textfield",
						id:'activation_key',
						width: 200,
						emptyText:'Enter Activation Key ...',
						name:"activation key",
						allowBlank:true},'-',{
				text:"Load Customers Directory",
				handler : function () {
						
						Ext.getCmp('adoptcustomers').loadFileRecords('',Ext.getCmp('activation_key').getValue());		
				}
			},'-',{
				text:"Adopt Customers Directory",
				id: 'adoptdirectory',
				handler : function () {
						var selItems = Ext.getCmp('adoptcustomers').getSelectionModel().getSelections();
						var itemsList = "";
						for(var i = 0, n = selItems.length; i < n; i++) {
					     	itemsList = ((itemsList == "") ? "," : (itemsList + ",") ) + selItems[i].id
							itemsList += ((i == n-1) ? "," :  "");
					    }
						Ext.Ajax.request({
										   url: '/customers/adoptdirectory',
										   method : 'GET',
										   success: function(){
										   		Ext.Msg.alert('Post Customers Directory', 'Customers directory posted sucessfully');
										   },
										   failure: function(){
										   		Ext.Msg.alert('Post Customers Directory', 'Customers directory posted failed');
										   },
										   params: {customer_name : Ext.getCmp('cs_company_name').getValue(),
										   			items_list : itemsList,
										   			share : true}
										});	
						
				}
			},'-',{
				text:"Clean All",
				handler : function () {
					Ext.getCmp('adoptcustfrm').form.setValues( [ {id:'cs_company_name', value:''}]);
					Ext.getCmp('activation_key').setValue('');		
				}
			}]
	});
	
	this.collaboratetabs = new Ext.TabPanel({
				region: 'center',
				margins:'3 3 3 0',
				//activeTab: 0,
				defaults:{autoScroll:true},
				id: 'collaborate_tabs',
				items:[
					this.postcustomers,
					this.adoptcustomersfrm
				]
			});
	
	BloneyPeople.CollaborateWnd.superclass.constructor.call(this, {
		title : 'Bloney People Collaborate',
		id: 'wndbloneypeoplecollaborate',
		modal : true,
		width : config.width,
		height : config.height,
        items: [this.collaboratetabs],
		buttons: [{
				text: 'Close People Collaborate Window',
				handler : function() {
					Ext.getCmp('wndbloneypeoplecollaborate').close();
				}
			}]
		});
	Ext.getCmp('cs_company_name').on('select', this.onSelectCN, this);
	
};

Ext.extend(BloneyPeople.CollaborateWnd, Ext.Window,{
	
	handleActivate : function(tab){

		if(tab.id == 'postcustomers')
			Ext.getCmp('postcustomers').loadRecords();
			
		tab.doLayout();		
	},
	
	onSelectCN : function(o, record, index){
		Ext.getCmp('adoptcustomers').loadFileRecords(record.data.company_name);
	},
	
	onSelectCT : function(o, record, index){
		
		if("ALL" == record.data.company_type)
		{
			Ext.getCmp('postcustomers').getStore().clearFilter();
		}
		else
		{
			Ext.getCmp('postcustomers').getStore().filter('customer_type',record.data.company_type);
		}
		
	}
	,
	
	onSelectET : function(o, record, index){
		
		if("ALL" == record.data.company_type)
		{
			Ext.getCmp('postcustomers').getStore().clearFilter();
		}
		else
		{
			Ext.getCmp('postcustomers').getStore().filter('customer_type',record.data.company_type);
		}
		
	}
});

BloneyPeople.MainWnd = function(config){
	
	Ext.apply(this, config);
	
	this.rolesstore = new Ext.data.Store({
		proxy: new Ext.data.HttpProxy({url: '/authorize/roles', method: 'GET'}),
		reader: new Ext.data.JsonReader({
				//id: 'title'
			}, ['title', 'description']),
			remoteSort: false
	});
	this.rolesstore.baseParams = {format : 'json'};
	this.rolesstore.load();
	
	this.domainsstore = new Ext.data.Store({
		proxy: new Ext.data.HttpProxy({url: '/authorize/domains', method: 'GET'}),
		reader: new Ext.data.JsonReader({
				//id: 'title'
			}, ['domain','domain_description']),
			remoteSort: false
	});
	this.domainsstore.baseParams = {format : 'json'};
	this.domainsstore.load();
	
	this.peopleform = new Ext.FormPanel({
			labelWidth: 75, // label settings here cascade unless overridden
			url: '/authorize/update', //signup',
			frame:true,
			width: 250,
			minSize: 250,
			maxSize: 250,
			defaultType: 'textfield',
			region: 'west',
            split: true,
            collapsible: true,
            margins:'3 0 3 3',
            cmargins:'3 3 3 3',
			id: 'peopleform',
			items: [{
						xtype: 'hidden',
						name: 'id',
						id: 'pid',
						width : 150,
						allowBlank:true
					},
					{
						fieldLabel: 'Login',
						name: 'login',
						id: 'plogin_name',
						width : 150,
						allowBlank:false
					},{
						xtype:"combo",
						fieldLabel:"Role",
						id: 'proles',
						width : 150,
						name: 'title',
						store: this.rolesstore,
						displayField:'description',
						valueField: 'title',
						hiddenName: 'titleId',
						typeAhead: true,
						mode: 'local',
						triggerAction: 'all',
						emptyText:'Select a role...'
					},{
						xtype:"combo",
						fieldLabel:"Domain",
						id: 'pdomain',
						width : 150,
						name: 'domain',
						store: this.domainsstore,
						displayField:'domain',
						valueField: 'domain',
						hiddenName: 'domainId',
						typeAhead: true,
						mode: 'local',
						triggerAction: 'all',
						emptyText:'Select a domain...'
					},{
						xtype:'fieldset',
						title: 'User Details',
						autoHeight:true,
						collapsible: true,
						defaults : {width: 130},
						items :[{
									xtype:"field",
									fieldLabel:"Email",
									id: 'pemail',
									name:"email",
									allowBlank:false,
									vtype:'email'
								},{
									xtype:"textfield",
									fieldLabel:"Password",
									id: 'ppassword',
									name:"password",
									allowBlank:false,
									inputType : 'password'
								},{
									xtype:"textfield",
									fieldLabel:"Confirm",
									id: 'pconfirm',
									name:"password_confirmation",
									allowBlank:false,
									inputType : 'password'
								}
						]
				}
			],
			bbar: [{
				text: 'Update',
				handler : function() {
						Ext.getCmp('peopleform').getForm().submit({
									waitMsg:'Please Wait...',
									reset:true,
									method:'POST',
									success:function(f,a){
											if(a && a.result){
												Ext.example.msg(this.title, '{0}.', a.result.notice);												
										}
									},
									failure : function(f,a){				
										if(a && (a.result || a.response)){
											var notice = (a.result)? a.result.notice : a.response.statusText;
											Ext.example.msg(this.title, '{0}.',notice );
										}
									}
								});	
				}
			},{
				text : 'Create',
				handler : function(){
					Ext.getCmp('peopleform').form.setValues( [{id:'plogin_name', value:''},
						  {id:'titleId', value:''},
						  {id:'domainId', value:''},
						  {id:'pemail', value:''},
						  {id:'ppassword', value:''},
						  {id:'pconfirm', value:''}]);
				}
			},
			{
				text : 'Change Password',
				handler : function(){
						Ext.Ajax.request({
										   url: '/authorize/forgot_password',
										   success: function(){
										   		Ext.Msg.alert('Delete Category', 'Could not delete this category since it is in use');
										   },
										   failure: function(){
										   		Ext.Msg.alert('Delete Category', 'Could not delete this category since it is in use');
										   },
										   params: { email: Ext.getCmp('pemail').getValue()}
										});
				}
			}]
		});

	this.users = new BloneyPeople.PeopleGrid({
						id: 'users',
						title: 'Users',
						listeners: {activate: this.handleActivate}
	});

	this.roles = new BloneyPeople.PeopleGrid({
						id: 'roles',
						title: 'Permission',
						listeners: {activate: this.handleActivate}
	});


	this.search = new Ext.FormPanel({
		frame:true,
		id : 'peoplesearch',
		url: '/authorize/user_list', 
		title: 'Search & Filter',
		layout:'form',
		listeners: {activate: this.handleActivate},
		items:[
				{
					xtype:'fieldset',
					title: 'Search User',
					autoHeight:true,
					collapsible: true,
					items :[
							{
								layout:'column',
								border:false,
								items:[
									{
										columnWidth: 0.5,
										layout: 'form',
										defaults: {width: 100},
										items:[
												{
													xtype:"textfield",
													id:'slogin',
													fieldLabel:"By login",
													name:"login",
													allowBlank:true
												}
										]
									},{
										columnWidth: 0.5,
										layout: 'form',
										defaults: {width: 100},
										items:[
												{
													xtype:"field",
													fieldLabel:"By email",
													id: 'semail',
													name:"email",
													allowBlank:true,
													vtype:'email'
												}
										]
									}
								]
							}
					]
				},{
					xtype:'fieldset',
					checkboxToggle:true,
					title: 'Filter Users',
					autoHeight:true,
					collapsed: true,
					items :[
							{
								layout:'column',
								border:false,
								items:[
									{
										columnWidth: 0.5,
										layout: 'form',
										defaults: {width: 100},
										items:[
												{
													xtype:"combo",
													fieldLabel:"Role",
													id: 'roles_filter',
													width : 100,
													name: 'title',
													store: this.rolesstore,
													displayField:'description',
													valueField: 'title',
													hiddenName: 'titleId',
													typeAhead: true,
													mode: 'local',
													triggerAction: 'all',
													emptyText:'Select a role...'
												},{
													xtype:"combo",
													fieldLabel:"Domain",
													id: 'domain_filter',
													width : 100,
													name: 'domain',
													store: this.domainsstore,
													displayField:'domain_description',
													valueField: 'domain',
													hiddenName: 'domainId',
													typeAhead: true,
													mode: 'local',
													triggerAction: 'all',
													emptyText:'Select a domain...'
												}
										]
									},{
										columnWidth: 0.5,
										layout: 'form',
										defaults: {width: 100},
										items:[
												{
													xtype: "datefield",
													fieldLabel: 'Created At',
													name: 'createdAt',
													id:'sdatecreated',
													allowBlank:true
												}
										]
									}
								]
							}
					]
				}
		  ],
		  buttons:[{
				text:"Clean All",
				handler : function () {
					Ext.getCmp('peoplesearch').form.setValues( [{id:'slogin', value:''},
						  {id:'roles_filter', value:''},
						  {id:'domain_filter', value:''},
						  {id:'semail', value:''},
						  {id:'sdatecreated', value:''}]);
				}
			},{
				text:"Submit",
				handler : function () {
					Ext.getCmp('people_tabs'). setActiveTab(0);
					Ext.getCmp('users').loadRecords(Ext.getCmp('roles_filter').getValue());				
				}
			}]
	});

	

	this.tabs = new Ext.TabPanel({
				region: 'center',
				margins:'3 3 3 0',
				activeTab: 0,
				defaults:{autoScroll:true},
				id: 'people_tabs',
				items:[
					this.users,
					this.roles,
					this.search
				]
			});

	BloneyPeople.MainWnd.superclass.constructor.call(this, {
		title : 'Bloney People',
		id: 'wndbloneypeople',
		items: [this.peopleform, this.tabs],
		buttons:[new Ext.SplitButton({
					id: 'companycollbutton', // the container id
				   	text: 'Collaborate',
				   	//handler: optionsHandler, // handle a click on the button itself
				   	menu: new Ext.menu.Menu({
				        items: [
				        	// these items will render as dropdown menu items when the arrow is clicked:
					        {text: 'Publish People Directory', handler: function() {
					        	var comapnyCollaborateWnd = new BloneyPeople.CollaborateWnd({
					        										width:toolbarconfig.width - (Ext.getCmp('peopleform').getSize().width + 15),
					        										height:Ext.getCmp('people_tabs').getSize().height });
					        	position  = Ext.getCmp('people_tabs').getPosition();
					        	comapnyCollaborateWnd.setPosition(position[0],position[1]);
					        	Ext.getCmp('collaborate_tabs').setActiveTab(0);
					        	comapnyCollaborateWnd.show();
					        	
					        }},
					        {text: 'Adopt People Directory', handler: function() {
						        var comapnyCollaborateWnd = new BloneyPeople.CollaborateWnd({
					        										width:toolbarconfig.width - (Ext.getCmp('peopleform').getSize().width + 15),
					        										height:Ext.getCmp('people_tabs').getSize().height });
					        	
					        	position  = Ext.getCmp('people_tabs').getPosition();
					        	comapnyCollaborateWnd.setPosition(position[0],position[1]);
					        	Ext.getCmp('collaborate_tabs').setActiveTab(1);
					        	comapnyCollaborateWnd.show();
					        }},
							{text: 'Ask for People Directory', handler: function() {
						        var notificationCommmentWnd = new BloneyNotifications.CommentWnd();
						        notificationCommmentWnd.show();
					        }}
				        ]
				   	})
				}),{
				text: 'Close People Window',
				handler : function() {
					Ext.getCmp('wndbloneypeople').close();
				}
			}]
		});
};


Ext.extend(BloneyPeople.MainWnd, Ext.Window,{

	handleActivate : function(tab){

		if(tab.id == 'users')
			Ext.getCmp('users').loadRecords();

		if(tab.id == 'roles')
			Ext.getCmp('roles').loadRecords();

		tab.doLayout();
		
	}
});

// ---------------------------------
// Bloney Company
// ---------------------------------
BloneyCompany = {};

BloneyCompany.CompaniesGrid = function(config){
	Ext.apply(this, config);

	this.store = new Ext.data.Store({
		proxy: new Ext.data.HttpProxy({url: '/customers', method: 'GET'}),
		reader: new Ext.data.JsonReader({
				//root: 'Companies',
				//totalProperty: 'Total',
				id: 'id'
			}, [
				'id',
				'authenticity_token',
				'customer_name',
				'customer_type',
				'city',
				'country',
				'address',
				'phone',
				'fax',
				'email',
				'url'
			]),
		remoteSort: false
	});
	
	if(config.checkbox == true)				
	{
		this.selmodel = new Ext.grid.CheckboxSelectionModel({singleSelect:false});
		this.columns = [
				this.selmodel,{
				   id: 'customer_name',
				   header: "Company",
				   dataIndex: 'customer_name',
				   width: 90
				},{
				   header: "Address",
				   dataIndex: 'address',
				   width: 120
				},{
				   header: "Phone",
				   dataIndex: 'phone',
				   width: 70
				},{
				   header: "Fax",
				   dataIndex: 'fax',
				   width: 70
				}];
	}
	else
	{
		this.selmodel = new Ext.grid.RowSelectionModel({
					singleSelect:true
			});
			this.columns = [{
				   id: 'customer_name',
				   header: "Company",
				   dataIndex: 'customer_name',
				   width: 90
				},{
				   header: "Address",
				   dataIndex: 'address',
				   width: 120
				},{
				   header: "Phone",
				   dataIndex: 'phone',
				   width: 70
				},{
				   header: "Fax",
				   dataIndex: 'fax',
				   width: 70
				}];
	}
	
	BloneyCompany.CompaniesGrid.superclass.constructor.call(this, {

		loadMask: {msg:'Loading Companies...'},
		sm: this.selmodel,
		viewConfig: {
			forceFit:true,
			enableRowBody:true,
			showPreview:true,
			autoExpandColumn: 'customer_name'
		}
	});

	this.on('rowcontextmenu', this.onContextClick, this);
	
};

Ext.extend(BloneyCompany.CompaniesGrid,Ext.grid.GridPanel,{
	
	onRowClick : function(grid, rowIndex, e){
		var record = grid.getStore().getAt(rowIndex);  // Get the Record
        Ext.getCmp('companiesform').form.setValues( [
									  {id:'company_id', value:record.data.id},
								      {id:'authenticity_token', value:record.data.authenticity_token},
        							  {id:'s_company_name', value:record.data.customer_name},
        							  {id:'abbrId', value:record.data.customer_type},
									  {id:'s_address', value:record.data.address},
									  {id:'s_city', value:record.data.city},
									  {id:'s_country', value:record.data.country},
									  {id:'s_phone', value:record.data.phone},
									  {id:'s_fax', value:record.data.fax},
									  {id:'s_email', value:record.data.email},
									  {id:'s_url', value:record.data.url}]);
	},
 	onContextClick : function(grid, index, e){
 			var record = grid.getStore().getAt(index);
	        if(!this.menu){ // create context menu on first right click
	            this.menu = new Ext.menu.Menu({
	                id:'grid-ctx',
	                items: [
					// stick any markup in a menu
		            '<b class="x-toolbar x-small-editor">Companies Context</b>',
		            '-',{
		                text: 'Send Email',
		                handler: function() {
		                		Ext.getCmp('company_tabs').setActiveTab('sendemail');
		                		Ext.getCmp('sendemail').form.setValues( [
									  {id:'to_company', value:record.data.email}]);
		                	}
		            	}, {
		                text: 'Show Accounts',
		               	handler: function() {
		               			var bloneyAccountWin = new BloneyAccount.MainWnd(toolbarconfig);
								Ext.getCmp('accounts_tabs').setActiveTab('saccountstabs');
								bloneyAccountWin.show();
		                	}
		                }
		             ]
	            });
	            this.menu.on('hide', this.onContextHide, this);
	        }
	        e.stopEvent();
	        if(this.ctxRow){
	            Ext.fly(this.ctxRow).removeClass('x-node-ctx');
	            this.ctxRow = null;
	        }
	        this.ctxRow = this.view.getRow(index);
	        this.ctxRecord = this.store.getAt(index);
	        Ext.fly(this.ctxRow).addClass('x-node-ctx');
	        this.menu.showAt(e.getXY());
    },

	onContextHide : function(){
	        if(this.ctxRow){
	            Ext.fly(this.ctxRow).removeClass('x-node-ctx');
	            this.ctxRow = null;
	        }
    },



    loadRecords : function(customer_type) {
    	this.store.baseParams = {
			customer_type:(customer_type != null )? customer_type : '',
			customer_name: "",
			customer_city: "",
			customer_country: "",
			format: 'json'
		};
        this.store.load();
		
    },
	
    searchRecords : function (searchconfig){
    	this.store.baseParams = {
			customer_type: searchconfig.customer_type,
			customer_name: searchconfig.customer_name,
			customer_city: searchconfig.customer_city,
			customer_country: searchconfig.customer_country,
			format: 'json'
		};
        this.store.load();
    },
    
    loadFileRecords : function(customername, activation_key) {

    	this.store.baseParams = {
			customer_type: null ,
			source: "FILE" ,
			customer_name : customername,
			activation_key : (activation_key != null ? activation_key : ''),
			format: 'json'
		};
        this.store.load();
		
    },
	onBeforeShow : function(){
		
		var record = this.store.getAt(0);  // Get the Record
       
	    if(record != null)
			Ext.getCmp('companiesform').form.setValues( [
										  {id:'company_id', value:record.data.id},
									      {id:'authenticity_token', value:record.data.authenticity_token},
	        							  {id:'s_company_name', value:record.data.customer_name},
	        							  {id:'abbrId', value:record.data.customer_type},
										  {id:'s_address', value:record.data.address},
										  {id:'s_city', value:record.data.city},
										  {id:'s_country', value:record.data.country},
										  {id:'s_phone', value:record.data.phone},
										  {id:'s_fax', value:record.data.fax},
										  {id:'s_email', value:record.data.email},
										  {id:'s_url', value:record.data.url}]);
	}
});

BloneyCompany.CollaborateWnd = function(config){
	
	Ext.apply(this, config);
	
	this.comapniessharelist = new Ext.data.Store({
		proxy: new Ext.data.HttpProxy({url: '/customers/comapanies_sharelist', method: 'GET'}),
		reader: new Ext.data.JsonReader({
				//id: 'id'
			}, [
				'company_name'		
			]),
		remoteSort: false
	});
	this.comapniessharelist.baseParams = {format : 'json'};
	this.comapniessharelist.load();
	
	this.expertssharelist = new Ext.data.Store({
		proxy: new Ext.data.HttpProxy({url: '/customers', method: 'GET'}),
		reader: new Ext.data.JsonReader({
				//id: 'id'
			}, [
				'customer_name'		
			]),
		remoteSort: false
	});
	this.expertssharelist.baseParams = {format : 'json', 
										customer_type:'EXPERT',
										customer_name: '',
										customer_city: '',
										customer_country: '',
										fields : 'customer_name'};
	this.expertssharelist.load();
	
	this.comboExpertssharelist = new Ext.form.ComboBox({
							//fieldLabel:"Comapnies list",
							width : 140,
							store: this.expertssharelist,
							displayField:'customer_name',
							valueField: 'customer_name',
							hiddenName: 'customer_name',
							typeAhead: true,
							id:'es_customer_name',
							mode: 'local',
							triggerAction: 'all',
							emptyText:'Expert Name...',
							selectOnFocus:true,
							allowBlank:true
					});
	this.comboExpertssharelist.on('select', this.onSelectET, this);
	
	this.comboCompanyType = new Ext.form.ComboBox({
							fieldLabel:"Comapnies list",
							width : 140,
							store: new Ext.data.SimpleStore({
											fields: ['company_type', 'company_typedesc'],
											data : [['ALL','All Companies'],
													['LOCAL','My Companies'],
													['VENDOR','Vendor'],
													['CUSTOMER','Customer'],
													['EXPERT','Expert']]
									}),
							displayField:'company_typedesc',
							valueField: 'company_type',
							hiddenName: 'company_typeId',
							typeAhead: true,
							id:'cs_company_type',
							mode: 'local',
							triggerAction: 'all',
							emptyText:'Comapany Type...',
							selectOnFocus:true,
							allowBlank:false
					});
	this.comboCompanyType.on('select', this.onSelectCT, this);
	
	this.postcustomers = new BloneyCompany.CompaniesGrid({
						id: 'postcustomers',
						title: 'Publish Customers Directory',
						height: (config.height - 95),
						listeners: {activate: this.handleActivate},
						checkbox : true,
						bbar: ['->',this.comboExpertssharelist,'-',this.comboCompanyType,'-',{
								text : 'Share with Expert',
								handler : function() {
									var selItems = Ext.getCmp('postcustomers').getSelectionModel().getSelections();
									var itemsList = "";
									for(var i = 0, n = selItems.length; i < n; i++) {
								     	itemsList = ((itemsList == "") ? "" : (itemsList + ",") ) + selItems[i].id								     	
								    }
								    if (itemsList != "" && Ext.getCmp('es_customer_name').getValue() != "" )
								    {
								    	Ext.Ajax.request({
								    	   url: '/customers/postdirectory',
										   method : 'GET',
										   success: function(){
										   		Ext.Msg.alert('Post Customers Directory', 'Customers directory posted sucessfully');
										   },
										   failure: function(){
										   		Ext.Msg.alert('Post Customers Directory', 'Customers directory posted failed');
										   },
										   params: {items_list : itemsList,
										   			share : false,
										   			expert_name : Ext.getCmp('es_customer_name').getValue()}
										});
								    }
								}
						},'-',{
								text : 'Publish Directory',
								handler : function() {
									var selItems = Ext.getCmp('postcustomers').getSelectionModel().getSelections();
									var itemsList = "";
									for(var i = 0, n = selItems.length; i < n; i++) {
								     	itemsList = ((itemsList == "") ? "" : (itemsList + ",") ) + selItems[i].id								     	
								    }
									if (itemsList != "")
								    {
									    Ext.Ajax.request({
									    	   url: '/customers/postdirectory',
											   method : 'GET',
											   success: function(){
											   		Ext.Msg.alert('Post Customers Directory', 'Customers directory posted sucessfully');
											   },
											   failure: function(){
											   		Ext.Msg.alert('Post Customers Directory', 'Customers directory posted failed');
											   },
											   params: {items_list : itemsList,
											   			share : true}
											});
								    }
								}
						},'-',new Ext.SplitButton({
								id: 'cleandirectory', 
							   	text: 'Clean All Directories',
							   	handler: function() {
							   				Ext.Ajax.request({
									    	   url: '/customers/cleandirectory',
											   method : 'GET',
											   success: function(){
											   		Ext.Msg.alert('Clean Customers Directory', 'Customers directory cleaned sucessfully');
											   },
											   failure: function(){
											   		Ext.Msg.alert('Clean Customers Directory', 'Customers directory cleaned failed');
											   },
											   params: { share_type : 'ALL'}
											});}, // handle a click on the button itself
							   	menu: new Ext.menu.Menu({
							        items: [
							        	// these items will render as dropdown menu items when the arrow is clicked:
								        {
									        text: 'Clean Shared Directory', 
									        handler: function() {
									        	Ext.Ajax.request({
										    	   url: '/customers/cleandirectory',
												   method : 'GET',
												   success: function(){
												   		Ext.Msg.alert('Clean Customers Directory', 'Customers directory cleaned sucessfully');
												   },
												   failure: function(){
												   		Ext.Msg.alert('Clean Customers Directory', 'Customers directory cleaned failed');
												   },
												   params: { share_type : 'PUBLIC'}
												});
									        	
									        }
								        },{
									        text: 'Clean Company Directory', 
									        handler: function() {
										        Ext.Ajax.request({
										    	   url: '/customers/cleandirectory',
												   method : 'GET',
												   success: function(){
												   		Ext.Msg.alert('Clean Customers Directory', 'Customers directory cleaned sucessfully');
												   },
												   failure: function(){
												   		Ext.Msg.alert('Clean Customers Directory', 'Customers directory cleaned failed');
												   },
												   params: { share_type : 'PRIVATE'}
												});
									        }
								        }
							        ]
							   	})
							})]
	});
	this.postcustomers.on('rowclick', this.postcustomers.onRowClick, this.postcustomers);
	
	this.adoptcustomers = new BloneyCompany.CompaniesGrid({
						id: 'adoptcustomers',
						title: 'Customers list',
						checkbox : true,
						height: (config.height - 160),
						listeners: {activate: this.handleActivate}
	});
	this.adoptcustomers.on('rowclick', this.adoptcustomers.onRowClick, this.adoptcustomers);
	
	this.adoptcustomersfrm = new Ext.FormPanel({
		frame:true,
		id : 'adoptcustfrm',
		title: 'Adopt Customers Directory',
		//height : 290,
		autoHeight : true,
		listeners: {activate: this.handleActivate},
		items:[
				{
					xtype:"hidden",
					id:'adoptcustomersfrm_id'
				},{
					xtype:"combo",
					fieldLabel:"Comapnies list",
					width : 200,
					store: this.comapniessharelist,
					displayField:'company_name',
					valueField: 'company_name',
					hiddenName: 'company_nameId',
					typeAhead: true,
					id:'cs_company_name',
					mode: 'local',
					triggerAction: 'all',
					emptyText:'Select a comapny ...',
					selectOnFocus:true,
					allowBlank:true
				},
				this.adoptcustomers
		  ],
		  bbar:['->',{	xtype:"textfield",
						id:'activation_key',
						width: 200,
						emptyText:'Enter Activation Key ...',
						name:"activation key",
						allowBlank:true},'-',{
				text:"Load Customers Directory",
				handler : function () {
						
						Ext.getCmp('adoptcustomers').loadFileRecords('',Ext.getCmp('activation_key').getValue());		
				}
			},'-',{
				text:"Adopt Customers Directory",
				id: 'adoptdirectory',
				handler : function () {
						var selItems = Ext.getCmp('adoptcustomers').getSelectionModel().getSelections();
						var itemsList = "";
						for(var i = 0, n = selItems.length; i < n; i++) {
					     	itemsList = ((itemsList == "") ? "," : (itemsList + ",") ) + selItems[i].id
							itemsList += ((i == n-1) ? "," :  "");
					    }
						Ext.Ajax.request({
										   url: '/customers/adoptdirectory',
										   method : 'GET',
										   success: function(){
										   		Ext.Msg.alert('Post Customers Directory', 'Customers directory posted sucessfully');
										   },
										   failure: function(){
										   		Ext.Msg.alert('Post Customers Directory', 'Customers directory posted failed');
										   },
										   params: {customer_name : Ext.getCmp('cs_company_name').getValue(),
										   			items_list : itemsList,
										   			share : true}
										});	
						
				}
			},'-',{
				text:"Clean All",
				handler : function () {
					Ext.getCmp('adoptcustfrm').form.setValues( [ {id:'cs_company_name', value:''}]);
					Ext.getCmp('activation_key').setValue('');		
				}
			}]
	});
	
	this.collaboratetabs = new Ext.TabPanel({
				region: 'center',
				margins:'3 3 3 0',
				//activeTab: 0,
				defaults:{autoScroll:true},
				id: 'collaborate_tabs',
				items:[
					this.postcustomers,
					this.adoptcustomersfrm
				]
			});
	
	BloneyCompany.CollaborateWnd.superclass.constructor.call(this, {
		title : 'Bloney Companies Collaborate',
		id: 'wndbloneycompanycollaborate',
		modal : true,
		width : config.width,
		height : config.height,
        items: [this.collaboratetabs],
		buttons: [{
				text: 'Close Companies Collaborate Window',
				handler : function() {
					Ext.getCmp('wndbloneycompanycollaborate').close();
				}
			}]
		});
	Ext.getCmp('cs_company_name').on('select', this.onSelectCN, this);
	
};

Ext.extend(BloneyCompany.CollaborateWnd, Ext.Window,{
	
	handleActivate : function(tab){

		if(tab.id == 'postcustomers')
			Ext.getCmp('postcustomers').loadRecords();
			
		tab.doLayout();		
	},
	
	onSelectCN : function(o, record, index){
		Ext.getCmp('adoptcustomers').loadFileRecords(record.data.company_name);
	},
	
	onSelectCT : function(o, record, index){
		
		if("ALL" == record.data.company_type)
		{
			Ext.getCmp('postcustomers').getStore().clearFilter();
		}
		else
		{
			Ext.getCmp('postcustomers').getStore().filter('customer_type',record.data.company_type);
		}
		
	}
	,
	
	onSelectET : function(o, record, index){
		
		if("ALL" == record.data.company_type)
		{
			Ext.getCmp('postcustomers').getStore().clearFilter();
		}
		else
		{
			Ext.getCmp('postcustomers').getStore().filter('customer_type',record.data.company_type);
		}
		
	}
});

BloneyCompany.MainWnd = function(config){
	Ext.apply(this, config);
	
	this.companiesform = new Ext.FormPanel({
			labelWidth: 75, // label settings here cascade unless overridden
			url: '/customers/create',
			frame:true,
			width: 250,
			minSize: 250,
			maxSize: 250,
			defaultType: 'textfield',
			region: 'west',
            split: true,
            collapsible: true,
            margins:'3 0 3 3',
            cmargins:'3 3 3 3',
			id:'companiesform',
			items: [{
						xtype:"hidden",
						id:'company_id'
					},{
						xtype:"hidden",
						id:'authenticity_token'
					},{
						fieldLabel: 'Company',
						name: 's_company_name',
						id:'s_company_name',
						width : 150,
						allowBlank:false
					},{
						xtype:"combo",
						fieldLabel:"Type",
						width : 150,
						store: new Ext.data.SimpleStore({
								fields: ['abbr', 'state'],
								data : [['LOCAL','My Companies'],
										['VENDOR','Vendor'],
										['CUSTOMER','Customer'],
										['EXPERT','Expert']]
						}),
						displayField:'state',
						valueField: 'abbr',
						hiddenName: 'abbrId',
						typeAhead: true,
						id:'s_company_type',
						mode: 'local',
						triggerAction: 'all',
						emptyText:'Select a comapny type...',
						selectOnFocus:true,
						allowBlank:false
					},{
						xtype:'fieldset',
						title: 'Company Details',
						autoHeight:true,
						collapsible: true,
						defaults : {width: 130},
						items :[
								{
									xtype:"textfield",
									fieldLabel:"Address",
									name:"s_address",
									id:'s_address',
									allowBlank:false
								},{
									xtype:"textfield",
									fieldLabel:"City",
									name:"s_city",
									id:'s_city',
									allowBlank:false
								},{
									xtype:"textfield",
									fieldLabel:"Country",
									name:"s_country",
									id:'s_country',
									allowBlank:false
								},{
									xtype:"field",
									fieldLabel:"Phone",
									name:"s_phone",
									id:'s_phone',
									allowBlank:false
								},{
									xtype:"field",
									fieldLabel:"Fax",
									name:"s_fax",
									id: 's_fax',
									allowBlank:false
								},{
									xtype:"field",
									fieldLabel:"Email",
									name:"s_email",
									id:'s_email',
									allowBlank:false,
									vtype:'email'
								},{
									xtype:"field",
									fieldLabel:"URL",
									name:"s_url",
									id:'s_url',
									allowBlank:false,
									vtype:'url'
								}
						]
				}
			]/*,
			tbar: ['->',{
				text: 'Create',
				handler : function() {
					var record =  Ext.getCmp('my_companies').getStore().getAt(0);
					Ext.getCmp('companiesform').form.setValues( [{id:'authenticity_token', value:record.data.authenticity_token}])
					Ext.getCmp('companiesform').getForm().submit({
								waitMsg:'Please Wait...',
								reset:true,
								method:'POST',
								success:function(f,a){
										if(a && a.result){
											Ext.example.msg(this.title, '{0}.', a.result.notice);	
											tab = Ext.getCmp('company_tabs').getActiveTab();
											Ext.getCmp('wndbloneycompany').handleActivate(tab);											
									}
								},
								failure : function(f,a){				
									if(a && (a.result || a.response)){
										var notice = (a.result)? a.result.notice : a.response.statusText;
										Ext.example.msg(this.title, '{0}.',notice );
									}
								}
							});				
				}
			},{
				text : 'Update',
				handler : function(){
					
					Ext.Ajax.request({
					   url: '/customers/update/',
					   method:'PUT',
					   success: function(){
					   		Ext.example.msg('Customer updated', 'Customer {0} was sucessfully updated.', Ext.getCmp('s_company_name').getValue());
					   },
					   failure: function(){
					   		Ext.example.msg('Customer updated', 'Customer {0} was failled to update.', Ext.getCmp('s_company_name').getValue());
					   },
					   params: { 	
					   				company_id:  Ext.getCmp('company_id').getValue(),
									authenticity_token : Ext.getCmp('authenticity_token').getValue(),
									s_company_name : Ext.getCmp('s_company_name').getValue(),
									abbrId : Ext.getCmp('s_company_type').getValue(),
									s_address : Ext.getCmp('s_address').getValue(),
									s_city : Ext.getCmp('s_city').getValue(),
									s_country : Ext.getCmp('s_country').getValue(),
									s_phone : Ext.getCmp('s_phone').getValue(),
									s_fax : Ext.getCmp('s_fax').getValue(),
									s_email : Ext.getCmp('s_email').getValue(),
									s_url : Ext.getCmp('s_url').getValue() 
								}
					});
					tab = Ext.getCmp('company_tabs').getActiveTab();
					Ext.getCmp('wndbloneycompany').handleActivate(tab);
				}
			},{
				text : 'Delete',
				handler : function(){
					Ext.Ajax.request({
					   url: '/customers/destroy/',
					   method:'DELETE',
					   success: function(){
					   		Ext.Msg.alert('Delete Customer', 'Castomer was successfully deleted.');
					   },
					   failure: function(){
					   		Ext.Msg.alert('Delete Customer', 'Customers delete failed.');
					   },
					   params: { company_id: Ext.getCmp('company_id').getValue(),
					   			 authenticity_token: Ext.getCmp('authenticity_token').getValue() }
					});
					tab = Ext.getCmp('company_tabs').getActiveTab();
					Ext.getCmp('wndbloneycompany').handleActivate(tab);
				}
			},{
				text: 'Clean All',
				handler : function() {
					 Ext.getCmp('companiesform').form.setValues( [
        							  {id:'s_company_name', value:''},
        							  {id:'abbrId', value:''},
									  {id:'s_address', value:''},
									  {id:'s_city', value:''},
									  {id:'s_country', value:''},
									  {id:'s_phone', value:''},
									  {id:'s_fax', value:''},
									  {id:'s_email', value:''},
									  {id:'s_url', value:''}]);
				}
			}]*/			
		});

	this.myComapnies = new BloneyCompany.CompaniesGrid({
						id: 'my_companies',
						title: 'My Companies',
						listeners: {activate: this.handleActivate}
	});
	this.myComapnies.on('rowclick', this.myComapnies.onRowClick, this.myComapnies);
	
	
	this.vendors = new BloneyCompany.CompaniesGrid({
						id: 'vendors',
						title: 'Vendors',
						listeners: {activate: this.handleActivate}
	});
	this.vendors.on('rowclick', this.vendors.onRowClick, this.vendors);
	
	this.customers = new BloneyCompany.CompaniesGrid({
						id: 'customers',
						title: 'Customers',
						listeners: {activate: this.handleActivate}
	});
	this.customers.on('rowclick', this.customers.onRowClick, this.customers);

	this.experts = new BloneyCompany.CompaniesGrid({
						id: 'experts',
						title: 'Experts',
						listeners: {activate: this.handleActivate}
	});
	this.experts.on('rowclick', this.experts.onRowClick, this.experts);
	
	this.customersearch = new BloneyCompany.CompaniesGrid({
						id: 'customersearch',
						title: 'Search results',
						height : 280,
						listeners: {activate: this.handleActivate}
	});
	this.customersearch.on('rowclick', this.customersearch.onRowClick, this.customersearch);
	
	this.search = new Ext.FormPanel({
		frame:true,
		id : 'companysearch',
		title: 'Search & Filter',
		listeners: {activate: this.handleActivate},
		items:[
				{
					xtype:'fieldset',
					title: 'Companies Search',
					autoHeight:true,
					collapsible: true,
					items :[
							{
								layout:'column',
								border:false,
								items:[
									{
										columnWidth: 0.5,
										layout: 'form',
										defaults: {width: 150},
										items:[
												{
													xtype:"textfield",
													fieldLabel:"By Name",
													name:"s_companyname",
													id : 's_companyname',
													allowBlank:true
												},{
													xtype:"combo",
													fieldLabel:"By Type",
													width : 150,
													store: new Ext.data.SimpleStore({
															fields: ['abbr', 'state'],
															data : [['LOCAL','My Companies'],
																	['VENDOR','Vendor'],
																	['CUSTOMER','Customer'],
																	['EXPERT','Expert']]
													}),
													displayField:'state',
													valueField: 'abbr',
													hiddenName: 'abbrId',
													id : 's_companytype',
													typeAhead: true,
													mode: 'local',
													triggerAction: 'all',
													emptyText:'Company type...',
													selectOnFocus:true
												}
										]
									},{
										columnWidth: 0.5,
										layout: 'form',
										defaults: {width: 150},
										items:[
												{
													xtype:"textfield",
													fieldLabel:"By City",
													name:"s_city",
													id : 's_companycity',
													allowBlank:true
												},{
													xtype:"textfield",
													fieldLabel:"By Country",
													name:"s_country",
													id : 's_companycountry',
													allowBlank:true
												}
										]
									}
								]
							}
					]
				},
				this.customersearch
		  ],
		  buttons:[{
				text:"Clean All",
				handler : function () {
					Ext.getCmp('companysearch').form.setValues( [
											{id:'s_companyname', value:''},
											{id:'s_companytype', value:''},
											{id:'s_companycity', value:''},
											{id:'s_companycountry', value:''}]);
					Ext.getCmp('customersearch').loadRecords();
				}
			},{
				text:"Submit",
				handler : function () {
					var searchconfig = {};
					searchconfig.customer_type = Ext.getCmp('s_companytype').getValue();
					searchconfig.customer_name = Ext.getCmp('s_companyname').getValue();
					searchconfig.customer_city = Ext.getCmp('s_companycity').getValue();
					searchconfig.customer_country = Ext.getCmp('s_companycountry').getValue();				
					
					Ext.getCmp('customersearch').searchRecords(searchconfig);	
					
				}
			}]
	});

	this.sendEmail = new Ext.FormPanel({
		url: '/customers/sendmail',
		title: 'Send Email',
		labelWidth: 70,
		id : 'sendemail',
		frame:true,
		defaultType: 'textfield',
		split: true,
		//collapsible: true,
		//margins:'3 0 3 3',
		defaults : {width : 540},
		listeners: {activate: this.handleActivate},
            	items: [{
				fieldLabel: 'To ',
				name: 'to_company',
				id : 'to_company',
				allowBlank:false,
				vtype:'email'
			},{
				fieldLabel: 'Subject',
				name: 'subject',
				allowBlank:false
			},{
					fieldLabel: 'Text',
                    xtype:'htmleditor',
					height : 320,
                    id:'email_editor'
                } 

			],
		buttons: [{
			text: 'Send',
			handler : function() {
				Ext.getCmp('sendemail').getForm().submit({
									waitMsg:'Please Wait...',
									reset:true,
									method:'GET',
									success:function(f,a){
											if(a && a.result){
												Ext.example.msg(this.title, '{0}.', a.result.notice);												
										}
									},
									failure : function(f,a){				
										if(a && (a.result || a.response)){
											var notice = (a.result)? a.result.notice : a.response.statusText;
											Ext.example.msg(this.title, '{0}.',notice );
										}
									}
								});	
			}
		}]
	});

	this.tabs = new Ext.TabPanel({
				region: 'center',
				margins:'3 3 3 0',
				activeTab: 0,
				defaults:{autoScroll:true},
				id: 'company_tabs',
				tabPosition : 'bottom',
				items:[
					this.myComapnies,
					this.vendors,
					this.customers,
					this.experts,
					this.search,
					this.sendEmail
				],
		tbar: [{
					text : 'Add',
					handler : function (){}		
				},{
					text : 'Edit',
					handler : function (){}		
				},{
					text : 'Delete',
					handler : function (){}		
				},{
				text: 'Save Changes',
				handler : function() {
						var formValues = Ext.getCmp('categorydetails').form.getValues();
						//Ext.getCmp('categorieslist').root.reload();
						var url = (formValues.category_id == "") ? "/categories/create" : "/categories/update";
						
						Ext.getCmp('categorydetails').getForm().submit({
									waitMsg:'Please Wait...',
									reset:true,
									method:'POST',
									url : url,
									success:function(f,a){
											if(a && a.result){
												Ext.example.msg(this.title, '{0}.', a.result.notice);	
												//Ext.getCmp('categorieslist').getNodeById(formValues.category_id).attributes.description = formValues.description;
												//Ext.getCmp('categorieslist').getNodeById(formValues.category_id).attributes.text = formValues.category;
												//Ext.getCmp('categorieslist').getNodeById(formValues.category_id).attributes.record_sts = formValues.statusId;
												Ext.getCmp('categorieslist').reload();
										}
									},
									failure : function(f,a){				
										if(a && (a.result || a.response)){
											var notice = (a.result)? a.result.notice : a.response.statusText;
											Ext.example.msg(this.title, '{0}.',notice );
										}
									}
								});	
				}
			},'->',{
					text : 'Statistics',
					handler : function (){}		
				},'-',{
					text : 'Archive',
					handler : function (){}		
				},{
					text : 'Restore',
					handler : function (){}		
				}]
			});

	BloneyCompany.MainWnd.superclass.constructor.call(this, {
		title : 'Bloney Companies',
		id: 'wndbloneycompany',
        items: [this.companiesform, this.tabs],
		buttons: [new Ext.SplitButton({
					id: 'companycollbutton', // the container id
				   	text: 'Collaborate',
				   	//handler: optionsHandler, // handle a click on the button itself
				   	menu: new Ext.menu.Menu({
				        items: [
				        	// these items will render as dropdown menu items when the arrow is clicked:
					        {text: 'Publish Customers Directory', handler: function() {
					        	var comapnyCollaborateWnd = new BloneyCompany.CollaborateWnd({
					        										width:toolbarconfig.width - (Ext.getCmp('companiesform').getSize().width + 15),
					        										height:Ext.getCmp('company_tabs').getSize().height });
					        	position  = Ext.getCmp('company_tabs').getPosition();
					        	comapnyCollaborateWnd.setPosition(position[0],position[1]);
					        	Ext.getCmp('collaborate_tabs').setActiveTab(0);
					        	comapnyCollaborateWnd.show();
					        	
					        }},
					        {text: 'Adopt Customers Directory', handler: function() {
						        var comapnyCollaborateWnd = new BloneyCompany.CollaborateWnd({
					        										width:toolbarconfig.width - (Ext.getCmp('companiesform').getSize().width + 15),
					        										height:Ext.getCmp('company_tabs').getSize().height });
					        	
					        	position  = Ext.getCmp('company_tabs').getPosition();
					        	comapnyCollaborateWnd.setPosition(position[0],position[1]);
					        	Ext.getCmp('collaborate_tabs').setActiveTab(1);
					        	comapnyCollaborateWnd.show();
					        }},
							{text: 'Ask for Customers Directory', handler: function() {
						        var notificationCommmentWnd = new BloneyNotifications.CommentWnd();
						        notificationCommmentWnd.show();
					        }}
				        ]
				   	})
				}),{
				text: 'Close Companies Window',
				handler : function() {
					Ext.getCmp('wndbloneycompany').close();
				}
			}]
		});
};


Ext.extend(BloneyCompany.MainWnd, Ext.Window,{

	handleActivate : function(tab){

		if(tab.id == 'customers')
			Ext.getCmp('customers').loadRecords('CUSTOMER');

		if(tab.id == 'vendors')
			Ext.getCmp('vendors').loadRecords('VENDOR');

		if(tab.id == 'my_companies')
			Ext.getCmp('my_companies').loadRecords('LOCAL');
		
		if(tab.id == 'experts')
		{
			Ext.getCmp('experts').loadRecords('EXPERT');
			Ext.getCmp('advisorslist').reload();
		}

		tab.doLayout();		
	}
});

// ---------------------------------
// Bloney Accounts
// ---------------------------------
BloneyAccount = {};

BloneyAccount.AccountsList = function(config) {

	Ext.apply(this, config);
    
	this.authenticate_key = "";
	
	BloneyAccount.AccountsList.superclass.constructor.call(this, {
				region          : 'west',
		        width           :  262,
		     	title			: 'Accounts List',
				id				: 'accounts_list',
				collapsible     : false,
				autoScroll      : true,
				rootVisible		: false,
				split           : true,
				lines			: false,
				margins			: '0 0 5 5',
				selModel        : new Ext.tree.DefaultSelectionModel(),
				root			: new Ext.tree.AsyncTreeNode({
									  text: 'Accounts',
									  id:'0',
									  expanded:true
								  }),
				
				
		        columns:[{
		            header:'Type',
		            width:80,
		            dataIndex:'account_type'
		        },{
		            header:'Account No',
		            width:90,
		            dataIndex:'account_no'
		        },{
		            header:'Balance',
		            width:90,
		            dataIndex:'balance'
		        }],
				loader : new Ext.tree.TreeLoader({	dataUrl:'/accounts/index_tree', 
													requestMethod:'GET',
													listeners: {
									                    beforeload: function(loader, node) {
									                       Ext.getCmp('accounts_list').authenticate_key = "";
									                    },
									                    load: function(loader, node) {
									                      	if(node.hasChildNodes() && Ext.getCmp('accounts_list').authenticate_key == "" )
									                    	{						                    		
									                    		Ext.getCmp('accounts_list').authenticate_key = Ext.getCmp('accounts_list').getRootNode().firstChild.attributes.authenticity_token;
									                    	}
									                    }
									                },
													preloadChildren: true,
													clearOnLoad: false,
													baseParams : {format : 'json'},
													uiProviders:{'col': Ext.tree.ColumnNodeUI}
													}),
				bbar            : [{
					text    : 'Expand All',
					tooltip : 'Expand all accounts',
					scope   : this,
					handler : function() { this.expandAll(); }
				},{
					text    : 'Collapse All',
					tooltip : 'Collapse all accounts',
					scope   : this,
					handler : function() { this.collapseAll(); }
				}]
 	});
/*
	new Ext.tree.TreeSorter(this,{
		folderSort:false
		,caseSensitive :false
		//,leafAttr:id
		//,dir : "desc"
		//,property:id
		,sortType : function(node){
					return parseInt(node.id, 10);
		}
	});
	*/
	
	//this.getSelectedNode = function() {
	//	return this.selModel.getSelectedNode();
	//};
	this.getSelectionModel().on('beforeselect', function(sm, node){
	        return node.isLeaf();
    });
		
	this.contextMenu = new Ext.menu.Menu({items:[{
				text    : 'Create Virtual Account',
				//iconCls : 'icon-deleteEl',
				scope   : this,
				handler : function(item) {

					}
			},{
				text    : 'View Account History',
				//iconCls : 'icon-addEl',
				scope   : this,
				handler : function(item) {

					}
			}]
	});


	this.on('click', this.onClick, this);
	this.on('contextmenu', this.onContextClick, this);
	
};

Ext.extend(BloneyAccount.AccountsList, Ext.tree.ColumnTree, {

	onClick : function(node, e){
		e.preventDefault();
		if(node.attributes.account_no != null)
			this.updateDetails(node);
	},

	updateDetails : function(node) {
		
		
		Ext.getCmp('accounts_form').form.reset();
		Ext.getCmp('accounts_form').form.setValues( 
									[ {id:'account_id', value:node.attributes.id},
									  {id:'authenticity_token', value:node.attributes.authenticity_token},
									  {id:'accountnumber', value:node.attributes.account_no},
									  {id:'accounttype', value:node.attributes.account_type},
									  {id:'accountcurrency', value:node.attributes.currency},
									  {id:'accountbalance', value:node.attributes.balance},
									  {id:'accountcrlimit', value:node.attributes.credit_limit},
									  {id:'accountbalancedate', value:node.attributes.balance_date}
									 ] );
									 
		Ext.getCmp('banks_form').form.reset();
		Ext.getCmp('banks_form').form.setValues([ {id:'bank_id', value:node.attributes.bank.id},
									  {id:'s_bankname', value:node.attributes.bank.name},
        							  {id:'s_bankbranch', value:node.attributes.bank.branch},
									  {id:'s_contact', value:node.attributes.bank.conn_person},
									  {id:'s_businessdate', value:node.attributes.bank.businessdate},
									  {id:'sb_address', value:node.attributes.bank.address},
									  {id:'sb_city', value:node.attributes.bank.city},
									  {id:'sb_country', value:node.attributes.bank.country},
									  {id:'sb_phone', value:node.attributes.bank.phone},
									  {id:'sb_fax', value:node.attributes.bank.fax},
									  {id:'sb_email', value:node.attributes.bank.email},
									  {id:'sb_url', value:node.attributes.bank.url}
									 ]);
		
		var tabs = Ext.getCmp('accounts_tabs').getItem('accountsstories');
		tabs.setTitle("Blog "+ node.attributes.account_no);
		tabs.handleActivate(Ext.getCmp('accounts_tabs').getItem('accountsstories'));
		Ext.getCmp('accounts_tabs').setActiveTab('accounts_form');
	},

	onContextClick : function(node, e) {
			e.preventDefault();
			if (node != this.root) {
				this.contextMenu.node = node;
				this.contextMenu.showAt(e.getXY());
			}
	}

});


BloneyAccount.Stories = function( config) {

    Ext.apply(this, config);

	this.store = new Ext.data.Store({
		proxy: new Ext.data.HttpProxy({url: '/accounts/stories', method: 'GET'}),
		reader: new Ext.data.JsonReader({
				root: 'data',
				//totalProperty: 'total',
				id: 'id'
			}, [
				'title',
				'story',
				'user',
				'story_type',
				'last_update'			
        ]),
        baseParams:{format:'json'},
		remoteSort: false
	});

	this.columns = [{
					   id: 'story',
					   header: "Story",
					   dataIndex: 'story',
					   width: 250
					   ,renderer: BloneyAccount.StoriesRenderers.story
					},{
					   header: "Author",
					   dataIndex: 'user',
					   width: 100,
					   hidden: true
					},{
					   header: "Type",
					   dataIndex: 'story_type',
					   width: 70,
					   align: 'right'
					},{
					   id: 'last',
					   header: "Last Post",
					   dataIndex: 'last_update',
					   width: 120
					   ,renderer: BloneyAccount.StoriesRenderers.lastPost
				}];

    BloneyAccount.Stories.superclass.constructor.call(this, {
        frame:true,
        loadMask: {msg:'Loading Stories...'},
        sm: new Ext.grid.RowSelectionModel({
            singleSelect:true
        }),
		trackMouseOver:false,
		listeners: {activate: this.handleActivate},
        viewConfig: {
            forceFit:true,
            enableRowBody:true,
            showPreview:true,
            autoExpandColumn: 'story',
			getRowClass : function(record, rowIndex, p, ds){
				if(this.showPreview){
					p.body = '<p>'+record.data.story+'</p>';
					return 'x-grid3-row-expanded';
				}
				return 'x-grid3-row-collapsed';
			}
        }
    });



};


Ext.extend(BloneyAccount.Stories, Ext.grid.GridPanel, {

    loadRecords : function(accountid) {

        this.store.baseParams = {
			id: accountid,
			format: 'json'
		};
        this.store.load();
    },

    handleActivate : function(tab){
    		var node = Ext.getCmp('accounts_list').getSelectionModel().getSelectedNode();
    		if(node == null)
    			node = Ext.getCmp('accounts_list').getRootNode();
    			
			this.loadRecords(node.id);
			tab.doLayout();
	}
});


BloneyAccount.StoriesRenderers = {
    story : function(value, p, record){
        return String.format(
                '<div class="topic"><b>{0}</b><hr></hr><span class="post-date">{1}</span></div>',
                record.data.title, record.data.last_update);
    },

    lastPost : function(value, p, r){
        return String.format('by {0}',r.data.user);
    }
};

BloneyAccount.MainWnd = function(config){
	
	Ext.apply(this, config);
	
	this.banksform = new Ext.FormPanel({
		url: '/banks/create',
        title: 'Banks',
		frame:true,
		id : 'banks_form',
        //bodyStyle:'padding:5px',
		listeners: {activate: this.handleActivate},
        items: [{
            layout:'column',
            border:false,
            items:[{
                columnWidth:.5,
                layout: 'form',
                border:false,
                items: [{
						xtype:"hidden",
						id:'bank_id'
					},{
						xtype:"hidden",
						id:'authenticity_token'
					},{
						fieldLabel: 'Bank Name',
						xtype:"textfield",
						name: 's_bankname',
						id:'s_bankname',
						width : 150,
						allowBlank:false
					},{
						fieldLabel: 'Bank Branch',
						xtype:"textfield",
						name: 's_bankbranch',
						id:'s_bankbranch',
						width : 150,
						allowBlank:false
					},{
						fieldLabel: 'Contact Person',
						xtype:"textfield",
						name: 's_contact',
						id:'s_contact',
						width : 150,
						allowBlank:false
					},
					new Ext.form.DateField({
						fieldLabel: 'Buseness Date',
						name: 's_businessdate',
						id : 's_businessdate',
						allowBlank:false,
						width : 150,
						format: 'Y-m-d'
					}),
				{
					xtype:'fieldset',
					title: 'Bank Details',
					autoHeight:true,
					collapsible: true,
					labelWidth : 75,
					width : 255,
					defaults : {width: 150},
					items :[
	                		{
								xtype:"textfield",
								fieldLabel:"Address",
								name:"sb_address",
								id:'sb_address',
								width : 150,
								allowBlank:false
							},{
								xtype:"textfield",
								fieldLabel:"City",
								name:"sb_city",
								id:'sb_city',
								width : 150,
								allowBlank:false
							},{
								xtype:"textfield",
								fieldLabel:"Country",
								name:"sb_country",
								id:'sb_country',
								width : 150,
								allowBlank:false
							},{
								xtype:"field",
								fieldLabel:"Phone",
								name:"sb_phone",
								id:'sb_phone',
								width : 150,
								allowBlank:false
							},{
								xtype:"field",
								fieldLabel:"Fax",
								name:"sb_fax",
								id: 'sb_fax',
								width : 150,
								allowBlank:false
							},{
								xtype:"field",
								fieldLabel:"Email",
								name:"sb_email",
								id:'sb_email',
								width : 150,
								allowBlank:false,
								vtype:'email'
							},{
								xtype:"field",
								fieldLabel:"URL",
								name:"sb_url",
								id:'sb_url',
								width : 150,
								allowBlank:false,
								vtype:'url'
							}]	
					}]
            },{
                columnWidth:.5,
                layout: 'form',
                border:false,
                defaults: {width: 270},
                items: [{
							xtype:'fieldset',
							title: 'Bank Map',
							autoHeight:true,
							collapsible: true,
							//defaults : {width: 120},
							items :[{
									xtype: 'gmappanel',
						            zoomLevel: 14,
						    		gmapType: 'map',
						    		width : 260,
						    		height : 340,
						    		addControl: new GSmallMapControl(),
						    		setCenter: {
						    			geoCodeAddr: '4 Yawkey Way, Boston, MA, 02215-3409, USA',
						    			marker: {title: 'Fenway Park'}
						    		},
						    		markers: [{
						    			lat: 42.339641,
						    			'long': -71.094224,
						    			marker: {title: 'Boston Museum of Fine Arts'}
						    		},{
						    			lat: 42.339419,
						    			'long': -71.09077,
						    			marker: {title: 'Northeastern University'}
						    		}]
								}]
					}]
            }]
        }],
		  bbar: [{
				text: 'Create',
				handler : function() {
					Ext.getCmp('banks_form').form.setValues( [{id:'authenticity_token', value:Ext.getCmp('accounts_list').authenticate_key}])
					Ext.getCmp('banks_form').getForm().submit({
								waitMsg:'Please Wait...',
								reset:true,
								method:'POST',
								success:function(f,a){
										if(a && a.result){
											Ext.example.msg(this.title, '{0}.', a.result.notice);	
											tab = Ext.getCmp('accounts_tabs').getActiveTab();
											Ext.getCmp('accounts_list').getRootNode().reload();
											Ext.getCmp('wndbloneyaccount').handleActivate(tab);											
									}
								},
								failure : function(f,a){				
									if(a && (a.result || a.response)){
										var notice = (a.result)? a.result.notice : a.response.statusText;
										Ext.example.msg(this.title, '{0}.',notice );
									}
								}
							});				
				}
			},{
				text : 'Update',
				handler : function(){
					
					Ext.Ajax.request({
					   url: '/banks/update/',
					   method:'PUT',
					   success: function(){
					   		Ext.example.msg('Bank updated', 'Bank {0} was sucessfully updated.', Ext.getCmp('accountnumber').getValue());
					   },
					   failure: function(){
					   		Ext.example.msg('Bank updated', 'Bank {0} was failled to update.', Ext.getCmp('accountnumber').getValue());
					   },
					   params: { 	
					   				accountbalancedate : Ext.getCmp('accountbalancedate').getValue(),
					   				account_id:  Ext.getCmp('account_id').getValue(),
									authenticity_token : Ext.getCmp('authenticity_token').getValue(),
									accountnumber : Ext.getCmp('accountnumber').getValue(),
									accounttype : Ext.getCmp('accounttype').getValue(),
									accountcurrency : Ext.getCmp('accountcurrency').getValue(),
									accountbalance : Ext.getCmp('accountbalance').getValue(),
									accountcrlimit : Ext.getCmp('accountcrlimit').getValue()
								}
					});
					tab = Ext.getCmp('accounts_tabs').getActiveTab();
					Ext.getCmp('accounts_list').getRootNode().reload();
					Ext.getCmp('wndbloneyaccount').handleActivate(tab);
				}
			},{
				text : 'Delete',
				handler : function(){
					Ext.Ajax.request({
					   url: '/banks/destroy/',
					   method:'DELETE',
					   success: function(){
					   		Ext.Msg.alert('Delete Account', 'Account was successfully deleted.');
					   },
					   failure: function(){
					   		Ext.Msg.alert('Delete Account', 'Account delete failed.');
					   },
					   params: { company_id: Ext.getCmp('account_id').getValue(),
					   			 authenticity_token: Ext.getCmp('authenticity_token').getValue() }
					});
					tab = Ext.getCmp('accounts_tabs').getActiveTab();
					Ext.getCmp('accounts_list').getRootNode().reload();
					Ext.getCmp('wndbloneyaccount').handleActivate(tab);
				}
			},{
				text: 'Clean All',
				handler : function() {
					 Ext.getCmp('banks_form').form.setValues( [
        							  {id:'s_bankname', value:''},
        							  {id:'s_bankbranch', value:''},
									  {id:'s_contact', value:''},
									  {id:'s_businessdate', value:''},
									  {id:'sb_address', value:''},
									  {id:'sb_city', value:''},
									  {id:'sb_country', value:''},
									  {id:'sb_phone', value:''},
									  {id:'sb_fax', value:''},
									  {id:'sb_email', value:''},
									  {id:'sb_url', value:''}]);
				}
			}]
	});
	
	this.accountsform = new Ext.FormPanel({
        //labelAlign: 'top',
        title: 'Accounts',
		frame:true,
		id : 'accounts_form',
        url: '/accounts/create',
		listeners: {activate: this.handleActivate},
        items: [{
						xtype:"hidden",
						id:'account_id'
					},{
						xtype:"hidden",
						id:'authenticity_token'
					},
        	{
					xtype:'fieldset',
					title: 'Account Details',
					autoHeight:true,
					collapsible: true,
					items :[{
            layout:'column',
            border:false,
            items:[{
                columnWidth:.5,
                layout: 'form',
                border:false,
                defaults: {width: 260},
                items: [{
						fieldLabel: 'Account Number',
						xtype:"textfield",
						name: 'accountnumber',
						id:'accountnumber',
						width : 150,
						allowBlank:false
					},{
						fieldLabel: 'Account Type',
						xtype:"textfield",
						name: 'accounttype',
						id:'accounttype',
						width : 150,
						allowBlank:false
					},{
						fieldLabel: 'Currency',
						xtype:"textfield",
						name: 'accountcurrency',
						id:'accountcurrency',
						width : 150,
						allowBlank:false
					}]
            },{
                columnWidth:.5,
                layout: 'form',
                border:false,
                defaults: {width: 260},
                items: [{
						fieldLabel: 'Balance',
						xtype:"textfield",
						name: 'accountbalance',
						id:'accountbalance',
						width : 150,
						allowBlank:false
					},{
						fieldLabel: 'Credit Limit',
						xtype:"textfield",
						name: 'accountcrlimit',
						id:'accountcrlimit',
						width : 150,
						allowBlank:false
					},{
						fieldLabel: 'Balance Date',
						xtype:"datefield",
						name: 'accountbalancedate',
						id:'accountbalancedate',
						width : 150,
						allowBlank:false,
						format : 'm/d/Y'
					}]
            }]
        }]},{
                cls:'x-plain',
                title:'Account Story',
                layout:'fit',
                height : 250,
				frame:true,
                items: {
                    xtype:'htmleditor',
                    id:'accstory',
                    fieldLabel:'Story'
                } 
       
        }],

        bbar: [{
				text: 'Create',
				handler : function() {
					Ext.getCmp('accounts_form').form.setValues( [{id:'authenticity_token', value:Ext.getCmp('accounts_list').authenticate_key}])
					Ext.getCmp('accounts_form').getForm().submit({
								waitMsg:'Please Wait...',
								reset:true,
								method:'POST',
								success:function(f,a){
										if(a && a.result){
											Ext.example.msg(this.title, '{0}.', a.result.notice);	
											tab = Ext.getCmp('accounts_tabs').getActiveTab();
											Ext.getCmp('accounts_list').getRootNode().reload();
											Ext.getCmp('wndbloneyaccount').handleActivate(tab);											
									}
								},
								failure : function(f,a){				
									if(a && (a.result || a.response)){
										var notice = (a.result)? a.result.notice : a.response.statusText;
										Ext.example.msg(this.title, '{0}.',notice );
									}
								}
							});				
				}
			},{
				text : 'Update',
				handler : function(){
					
					Ext.Ajax.request({
					   url: '/accounts/update/',
					   method:'PUT',
					   success: function(){
					   		Ext.example.msg('Account updated', 'Account {0} was sucessfully updated.', Ext.getCmp('accountnumber').getValue());
					   },
					   failure: function(){
					   		Ext.example.msg('Account updated', 'Account {0} was failled to update.', Ext.getCmp('accountnumber').getValue());
					   },
					   params: { 	
					   				accountbalancedate : Ext.getCmp('accountbalancedate').getValue(),
					   				account_id:  Ext.getCmp('account_id').getValue(),
									authenticity_token : Ext.getCmp('authenticity_token').getValue(),
									accountnumber : Ext.getCmp('accountnumber').getValue(),
									accounttype : Ext.getCmp('accounttype').getValue(),
									accountcurrency : Ext.getCmp('accountcurrency').getValue(),
									accountbalance : Ext.getCmp('accountbalance').getValue(),
									accountcrlimit : Ext.getCmp('accountcrlimit').getValue(),
									story : Ext.getCmp('accstory').getValue()
								}
					});
					tab = Ext.getCmp('accounts_tabs').getActiveTab();
					Ext.getCmp('accounts_list').getRootNode().reload();
					Ext.getCmp('wndbloneyaccount').handleActivate(tab);
				}
			},{
				text : 'Delete',
				handler : function(){
					Ext.Ajax.request({
					   url: '/accounts/destroy/',
					   method:'DELETE',
					   success: function(){
					   		Ext.Msg.alert('Delete Account', 'Account was successfully deleted.');
					   },
					   failure: function(){
					   		Ext.Msg.alert('Delete Account', 'Account delete failed.');
					   },
					   params: { account_id: Ext.getCmp('account_id').getValue(),
					   			 authenticity_token: Ext.getCmp('accounts_list').authenticate_key }
					});
					tab = Ext.getCmp('accounts_tabs').getActiveTab();
					Ext.getCmp('accounts_list').getRootNode().reload();
					Ext.getCmp('wndbloneyaccount').handleActivate(tab);
				}
			},{
				text: 'Clean All',
				handler : function() {
					 Ext.getCmp('accounts_form').form.setValues( [
        							  {id:'accountnumber', value:''},
        							  {id:'accounttype', value:''},
									  {id:'accountcurrency', value:''},
									  {id:'accountbalance', value:''},
									  {id:'accountcrlimit', value:''},
									  {id:'accountbalancedate', value:''}]);
				}
			}]		
    });
		
	 this.accountstree = new Ext.tree.TreePanel({
                id:'accountstree',
                animate:true, 
                rootVisible:true,
                autoScroll:true,
                frame : true,
                collapseFirst:false,
                loader : new Ext.tree.TreeLoader({	dataUrl:'/accounts/virtual_tree', 
													requestMethod:'GET',
													preloadChildren: true,
													clearOnLoad: false,
													baseParams : {format : 'json'}
													}),
                enableDD:true,
                containerScroll: true,
                dropConfig: {appendOnly:true},
				root			: new Ext.tree.AsyncTreeNode({
									  text: 'Accounts',
									  id:'0',
									  expanded:true
								  })
            });
            
     new Ext.tree.TreeSorter(this.accountstree,{
				folderSort:false
				,caseSensitive :true
				,property:id
			});
            
	this.vaccountstree = new Ext.tree.TreePanel({
                id:'vaccountstree',
                animate:true,
                autoScroll:true,
                rootVisible: true,
                frame : true,
                loader : new Ext.tree.TreeLoader({	dataUrl:'zzz'
													}),
                containerScroll: true,
                enableDD:true,
                dropConfig: {appendOnly:true},
                root			: new Ext.tree.AsyncTreeNode({
									  text: 'Virtual Account',
									  id:'0',
									  expanded:true
								  })
            });
                      
  	new Ext.tree.TreeSorter(this.vaccountstree,{
				folderSort:false
				,caseSensitive :true
				,property:id
			});
            
         
	
	this.virtualaccount = new Ext.FormPanel({
		frame:true,
		id : 'virtualaccount',
		title: 'Virtual Accounts',
		listeners: {activate: this.handleActivate},
		layout:'form',
		items:[
				{
						xtype:"hidden",
						id:'company_id'
					},{
						xtype:"hidden",
						id:'authenticity_token'
					},{
						fieldLabel: 'Account Name',
						xtype:"textfield",
						name: 's_vaccount',
						id:'s_vaccount',
						width : 150,
						allowBlank:false
					},
				{
					xtype:'fieldset',
					title: 'Create Virtual Account',
					autoHeight:true,
					collapsible: true,
					items :[
							{
								layout:'column',
								border:false,
								items:[
									{
										columnWidth: 0.5,
										layout: 'form',
										defaults: {width: 240}, 
										items:[
											this.accountstree	
										]
									},{
										columnWidth: 0.5,
										layout: 'form',
										defaults: {width: 240},
										items:[
											this.vaccountstree	
										]
									}
								]
							}
					]
				}
		  ],
		  buttons:[{
				text:"Submit",
				handler : function () {}
			},{
				text:"Reset",
				handler : function () {}
			}]
	});
	
	this.search = new Ext.Panel({
		frame:true,
		id : 'searchacc',
		title: 'Search & Filter',
		listeners: {activate: this.handleActivate},
		layout:'form',
		items:[
				{
					xtype:'fieldset',
					title: 'Accounts Search',
					autoHeight:true,
					collapsible: true,
					items :[
							{
								layout:'column',
								border:false,
								items:[
									{
										columnWidth: 0.5,
										layout: 'form',
										defaults: {width: 100},
										items:[
												{
													xtype:"textfield",
													fieldLabel:"By Account",
													name:"s_accno",
													allowBlank:false
												},{
													xtype:"combo",
													fieldLabel:"By Type",
													width : 100,
													store: new Ext.data.SimpleStore({
															fields: ['abbr', 'state'],
															data : [['LOCAL','My Companies'],
																	['SUPLIER','Suppliers'],
																	['COSUMER','Consumers']]
													}),
													displayField:'state',
													typeAhead: true,
													mode: 'local',
													triggerAction: 'all',
													emptyText:'Account type...',
													selectOnFocus:true
												}
										]
									},{
										columnWidth: 0.5,
										layout: 'form',
										defaults: {width: 100},
										items:[
												{
													xtype:"textfield",
													fieldLabel:"By City",
													name:"s_city",
													allowBlank:false
												},{
													xtype:"textfield",
													fieldLabel:"By Country",
													name:"s_country",
													allowBlank:false
												}
										]
									}
								]
							}
					]
				},{
					xtype:'fieldset',
					checkboxToggle:true,
					title: 'Advanced Filter',
					autoHeight:true,
					collapsed: true,
					items :[
							{
								layout:'column',
								border:false,
								items:[
									{
										columnWidth: 0.5,
										layout: 'form',
										defaults: {width: 100},
										items:[
												{
													xtype:"combo",
													fieldLabel:"Cashflow Type",
													store: new Ext.data.SimpleStore({
															fields: ['abbr', 'state'],
															data : [['1','Debit'],
																	['2','Credit'],
																	['3','Antidebit'],
																	['4','Anticredit'],
																	['5','All credit'],
																	['6','All debit'],
																	['7','All']]
													}),
													displayField:'state',
													typeAhead: true,
													mode: 'local',
													triggerAction: 'all',
													emptyText:'Select a type...',
													selectOnFocus:true
												}
										]
									},{
										columnWidth: 0.5,
										layout: 'form',
										defaults: {width: 100},
										items:[
												{
													xtype: "datefield",
													fieldLabel: 'Date from',
													name: 'datefrom',
													allowBlank:false
												},
												{
													xtype: "datefield",
													fieldLabel: 'Date from',
													name: 'datefrom',
													allowBlank:false
												}
										]
									}
								]
							}
					]
				}
		  ],
		  buttons:[{
				text:"Clear All",
				handler : function () {}
			},{
				text:"Search",
				handler : function () {}
			}]
	});
	
	this.accountstories = new BloneyAccount.Stories({
			id:'accountsstories',
        	//layout:'form',
			autoScroll:true,
			title:'Accounts Blog'
		});
	
	this.tabs = new Ext.TabPanel({
        region: 'center',
		id : 'accounts_tabs',
        margins:'3 3 3 0',
        //activeTab: 0,
        defaults:{autoScroll:true},
        items:[this.accountstories,this.banksform,this.accountsform,this.virtualaccount ,this.search]
    	});
	
	this.nav = new BloneyAccount.AccountsList();
	
	BloneyAccount.MainWnd.superclass.constructor.call(this, {
		title : 'Bloney Accounts',
		id: 'wndbloneyaccount',
    	items: [this.nav, this.tabs],
		buttons:[new Ext.SplitButton({
					id: 'button-ct', // the container id
				   	text: 'Collaborate',
				   	//handler: optionsHandler, // handle a click on the button itself
				   	menu: new Ext.menu.Menu({
				        items: [
				        	// these items will render as dropdown menu items when the arrow is clicked:
					        {text: 'Post Accounts database', handler: function() {}},
					        {text: 'Adopt Accounts database', handler: function() {}},
				        ]
				   	})
				}),{
				text: 'Close Accounts Window',
				handler : function() {
					Ext.getCmp('wndbloneyaccount').close();
			}
		}]
	});
};

Ext.extend(BloneyAccount.MainWnd, Ext.Window,{
	handleActivate : function(tab){
		tab.doLayout();		
	}
});


// ---------------------------------
// Bloney Help
// ---------------------------------
BloneyHelp = {};

BloneyHelp.ContentPanel = function(config) {
	
	Ext.apply(this, config);
	
	if(config.checked == true)
	{
		this.loader = new Ext.tree.TreeLoader({
        	dataUrl:'/helps',
        	requestMethod : 'GET',
        	preloadChildren: true,
			clearOnLoad: false,
            baseParams:{format:'json'},
            baseAttrs: {checked: false}
        });
	}
	else
	{
		this.loader = new Ext.tree.TreeLoader({
        	dataUrl:'/helps',
        	requestMethod : 'GET',
        	preloadChildren: true,
			clearOnLoad: false,
            baseParams:{format:'json'}
        });
	}
	
    BloneyHelp.ContentPanel.superclass.constructor.call(this, {
        layout:'fit',
        loader: this.loader,
        root: new Ext.tree.AsyncTreeNode({
            text:'Bloney Help',
            id:'0',
            expanded:true
         }),
        collapsible: true,
        rootVisible:false,
        lines:false,
        autoScroll:true,
        animCollapse:true,
        animate: true,
        collapseMode:'mini',
        collapseFirst:false 
    });
   	
    new Ext.tree.TreeSorter(this,{
		folderSort:false
		,caseSensitive :true
		,property:'id'
	});
	
    this.getSelectionModel().on('beforeselect', function(sm, node){
        return node.isLeaf();
    });
};

Ext.extend(BloneyHelp.ContentPanel, Ext.tree.TreePanel, {
    selectClass : function(cls){
        if(cls){
            var parts = cls.split('.');
            var last = parts.length-1;
            for(var i = 0; i < last; i++){ 
                var p = parts[i];
                var fc = p.charAt(0);
                var staticCls = fc.toUpperCase() == fc;
                if(p == 'Ext' || !staticCls){
                    parts[i] = 'pkg-'+p;
                }else if(staticCls){
                    --last;
                    parts.splice(i, 1);
                }
            }
            parts[last] = cls;
        }
    }
});

BloneyHelp.SearchPanel = function(config){
	Ext.apply(this, config);
	
	this.searchStore = new Ext.data.Store({
        proxy: new Ext.data.HttpProxy({
            url: '/helps/search'
        }),
        reader: new Ext.data.JsonReader({
	           root: 'data'
	        },
			['text', 'leaf', 'description', 'content', 'link']
		),
		baseParams:{format:'json'},
        listeners: {
            'beforeload' : function(){
                this.baseParams.qt = Ext.getCmp('search-type').getValue();
            }
        }
    });
    
	 var resultTpl = new Ext.XTemplate(
	        '<tpl for=".">',
	        '<div class="search-item">',
	            '<a class="cls" ext:cls="{text}" ext:link="{link}" href="{link}">{text}</a>',
	            '<p>{description}</p>',
	        '</div></tpl>'
	    );
		
	    
		BloneyHelp.SearchPanel.superclass.constructor.call(this,{
            id : 'search',
			tpl: resultTpl,
			title : 'Search',
			loadingText:'Searching...',
            store: this.searchStore,
            itemSelector: 'div.search-item',
			emptyText: '<h3>Use the search field above to search the Bloney Cashflow help topics.</h3>'
        });
    
        this.on('click', this.onClick,this);
};

Ext.extend(BloneyHelp.SearchPanel, Ext.DataView,{

	 onClick: function(e, target){
        if(target = e.getTarget('a:not(.exi)', 3)){
            var cls = Ext.fly(target).getAttributeNS('ext', 'cls');
            var main = Ext.getCmp('help-body');
            e.stopEvent();
            if(cls){
                var link = Ext.fly(target).getAttributeNS('ext', 'link');
                main.loadClass(link, cls);
            }else if(target.className == 'inner-link'){
                main.getActiveTab().scrollToSection(target.href.split('#')[1]);
            }else{
                window.open(target.href);
            }
        }else if(target = e.getTarget('.micon', 2)){
            e.stopEvent();
            var tr = Ext.fly(target.parentNode);
            if(tr.hasClass('expandable')){
                tr.toggleClass('expanded');
            }
        }
    },
    
    doSearch : function(e){
		var k = e.getKey();
		if(!e.isSpecialKey()){
			var text = e.target.value;
			if(!text){
				this.searchStore.baseParams.q = '';
				this.searchStore.removeAll();
			}else{
				this.searchStore.baseParams.q = text;
				this.searchStore.reload();
			}
		}
	}

});

BloneyHelp.DocPanel = Ext.extend(Ext.Panel, {
    closable: true,
    autoScroll:true,

    initComponent : function(){
        var ps = this.cclass.split('.');
        this.title = ps[ps.length-1];

        BloneyHelp.DocPanel.superclass.initComponent.call(this);
    },

    scrollToMember : function(member){
        var el = Ext.fly(this.cclass + '-' + member);
        if(el){
            var top = (el.getOffsetsTo(this.body)[1]) + this.body.dom.scrollTop;
            this.body.scrollTo('top', top-25, {duration:.75, callback: this.hlMember.createDelegate(this, [member])});
        }
    },

	scrollToSection : function(id){
		var el = Ext.getDom(id);
		if(el){
			var top = (Ext.fly(el).getOffsetsTo(this.body)[1]) + this.body.dom.scrollTop;
			this.body.scrollTo('top', top-25, {duration:.5, callback: function(){
                Ext.fly(el).next('h2').pause(.2).highlight('#8DB2E3', {attr:'color'});
            }});
        }
	},

    hlMember : function(member){
        var el = Ext.fly(this.cclass + '-' + member);
        if(el){
            el.up('tr').highlight('#cadaf9');
        }
    }
});

// Very simple plugin for adding a close context menu to tabs
Ext.ux.TabCloseMenu = function(){
    var tabs, menu, ctxItem;
    this.init = function(tp){
        tabs = tp;
        tabs.on('contextmenu', onContextMenu);
    }

    function onContextMenu(ts, item, e){
        if(!menu){ // create context menu on first right click
            menu = new Ext.menu.Menu([{
                id: tabs.id + '-close',
                text: 'Close Tab',
                handler : function(){
                    tabs.remove(ctxItem);
                }
            },{
                id: tabs.id + '-close-others',
                text: 'Close Other Tabs',
                handler : function(){
                    tabs.items.each(function(item){
                        if(item.closable && item != ctxItem){
                            tabs.remove(item);
                        }
                    });
                }
            }]);
        }
        ctxItem = item;
        var items = menu.items;
        items.get(tabs.id + '-close').setDisabled(!item.closable);
        var disableOthers = true;
        tabs.items.each(function(){
            if(this != item && this.closable){
                disableOthers = false;
                return false;
            }
        });
        items.get(tabs.id + '-close-others').setDisabled(disableOthers);
        menu.showAt(e.getPoint());
    }
};


BloneyHelp.SearchField = Ext.extend(Ext.form.TwinTriggerField, {
    initComponent : function(){
    	var search = Ext.getCmp('search');
        if(!search.store.baseParams){
			search.store.baseParams = {};
		}
		BloneyHelp.SearchField.superclass.initComponent.call(this);
		this.on('specialkey', function(f, e){
            if(e.getKey() == e.ENTER){
                this.onTrigger2Click();
            }
        }, this);
    },

    validationEvent:false,
    validateOnBlur:false,
    trigger1Class:'x-form-clear-trigger',
    trigger2Class:'x-form-search-trigger',
    hideTrigger1:true,
    width:180,
    hasSearch : false,
    paramName : 'query',

    onTrigger1Click : function(){
        if(this.hasSearch){
        	var search = Ext.getCmp('search');
            search.store.baseParams[this.paramName] = '';
			search.store.removeAll();
			this.el.dom.value = '';
            this.triggers[0].hide();
            this.hasSearch = false;
			this.focus();
        }
    },

    onTrigger2Click : function(){
        var v = this.getRawValue();
        if(v.length < 1){
            this.onTrigger1Click();
            return;
        }
		if(v.length < 2){
			Ext.Msg.alert('Invalid Search', 'You must enter a minimum of 2 characters to search the Bloney Cashflow Help');
			return;
		}
		var search = Ext.getCmp('search');
		search.store.baseParams[this.paramName] = v;
        var o = {start: 0};
        search.store.reload({params:o});
        this.hasSearch = true;
        this.triggers[0].show();
		this.focus();
		Ext.getCmp('navigator').setActiveTab('search');
    }
});

BloneyHelp.MainPanel = function(){
	  
	BloneyHelp.MainPanel.superclass.constructor.call(this, {
        id:'help-body',
        region:'center',
        margins:'3 1 1 1',
        resizeTabs: true,
        minTabWidth: 135,
        tabWidth: 135,
        plugins: new Ext.ux.TabCloseMenu(),
        enableTabScroll: true,
        activeTab: 0,
        items:[ {
            id:'Help_Welcome',
            title: 'Welcome',
            autoLoad: {
            	url: '/helps/show', 
            	callback: this.initSearch, 
            	scope: this
            	},
            //iconCls:'icon-docs',
            autoScroll: true            
        	}]
    });
};

Ext.extend(BloneyHelp.MainPanel, Ext.TabPanel, {

	loadClass : function(link, cls, member){
        var id = 'Help_' + cls;
        var tab = this.getComponent(id);
        if(tab){
            this.setActiveTab(tab);
            if(member){
                tab.scrollToMember(member);
            }
        }else{
            var autoLoad = {url: '/helps/show?link='+link};
            if(member){
                autoLoad.callback = function(){
                    Ext.getCmp(id).scrollToMember(member);
                }
            }
            var p = this.add(new BloneyHelp.DocPanel({
                id: id,
                cclass : cls,
                autoLoad: autoLoad
            }));
            this.setActiveTab(p);
        }
    }
});

BloneyHelp.CollaborateWnd = function(config){
	
	Ext.apply(this, config);
	
	this.helpssharelist = new Ext.data.Store({
		proxy: new Ext.data.HttpProxy({url: '/helps/helps_sharelist', method: 'GET'}),
		reader: new Ext.data.JsonReader({
				//id: 'id'
			}, [
				'company_name'		
			]),
		remoteSort: false
	});
	this.helpssharelist.baseParams = {format : 'json'};
	this.helpssharelist.load();
	
	this.expertssharelist = new Ext.data.Store({
		proxy: new Ext.data.HttpProxy({url: '/customers', method: 'GET'}),
		reader: new Ext.data.JsonReader({
				//id: 'id'
			}, [
				'customer_name'		
			]),
		remoteSort: false
	});
	this.expertssharelist.baseParams = {format : 'json', 
										customer_type:'EXPERT',
										customer_name: '',
										customer_city: '',
										customer_country: '',
										fields : 'customer_name'};
	this.expertssharelist.load();
	
	this.comboExpertssharelist = new Ext.form.ComboBox({
							width : 180,
							store: this.expertssharelist,
							displayField:'customer_name',
							valueField: 'customer_name',
							hiddenName: 'customer_name',
							typeAhead: true,
							id:'cs_customer_name',
							mode: 'local',
							triggerAction: 'all',
							emptyText:'Expert Name...',
							selectOnFocus:true,
							allowBlank:true
					});
	this.comboExpertssharelist.on('select', this.onSelectET, this);
	
	this.posthelptree = new BloneyHelp.ContentPanel({	id : 'posthelptree',
														height: (config.height - 145),
														border : true,
														bodyBorder : true,
														checked : true});
	this.posthelptree.on('click', this.onClick, this.posthelptree);
             
	this.posthelptreefrm = new Ext.FormPanel({
		frame:true,
		id : 'posthelptreefrm',
		title : 'Post Help Directory',	
		layout:'form',
		//height: (config.height - 95),
		autoHeight : true,	
		autoWidth : true,
		listeners: {activate: this.handleActivate},
		items:[{
				layout:'column',
				border:false,
				items:[
					{
						columnWidth: 0.4,
						layout: 'form',
						defaults: {width: 240}, 
						autoScroll : true,
						items:[
							this.posthelptree	
						]
					},{
						columnWidth: 0.6,
						layout: 'form',
						items:[
								{
									xtype:'fieldset',
									title: 'Help Details',
									autoHeight:true,
									collapsible: false,
									labelWidth : 80,
									defaults: {width: 260},
									items :[
											{
												xtype:"textfield",
												id:'ctext',
												fieldLabel:"Topic",
												name:"ctext",
												allowBlank:false
											},{
												xtype:"textarea",
												id:'cdescription',
												height : 100,
												fieldLabel:"Description",
												name:"cdescription",
												allowBlank:true
											},
											{
												xtype:"textarea",
												id:'ccontent',
												height : 140,
												fieldLabel:"Content",
												name:"ccontent",
												allowBlank:true
											}
									]								
								}
						]
					}
				]
			}
		  ],
		 bbar: ['->',this.comboExpertssharelist,'-',{
								text : 'Share with Expert',
								handler : function() {
									var selItems = Ext.getCmp('posthelptree').getChecked();
									var itemsList = "";
									for(var i = 0, n = selItems.length; i < n; i++) {
								     	itemsList = ((itemsList == "") ? "" : (itemsList + ",") ) + selItems[i].attributes.id								     	
								    }
								    if (itemsList != "" && Ext.getCmp('cs_customer_name').getValue() != "" )
								    {
								    	Ext.Ajax.request({
								    	   url: '/helps/postdirectory',
										   method : 'GET',
										   success: function(){
										   		Ext.Msg.alert('Post Helps Directory', 'Helps directory posted sucessfully');
										   },
										   failure: function(){
										   		Ext.Msg.alert('Post Helps Directory', 'Helps directory posted failed');
										   },
										   params: {items_list : itemsList,
										   			share : false,
										   			expert_name : Ext.getCmp('cs_customer_name').getValue()}
										});
								    }
								}
						},'-',{
								text : 'Publish Directory',
								handler : function() {
									var selItems = Ext.getCmp('posthelptree').getChecked();
									var itemsList = "";
									for(var i = 0, n = selItems.length; i < n; i++) {
								     	itemsList = ((itemsList == "") ? "" : (itemsList + ",") ) + selItems[i].attributes.id								     	
								    }
									if (itemsList != "")
								    {
									    Ext.Ajax.request({
									    	   url: '/helps/postdirectory',
											   method : 'GET',
											   success: function(){
											   		Ext.Msg.alert('Post Helps Directory', 'Helps directory posted sucessfully');
											   },
											   failure: function(){
											   		Ext.Msg.alert('Post Helps Directory', 'Helps directory posted failed');
											   },
											   params: {items_list : itemsList,
											   			share : true}
											});
								    }
								}
						},'-',new Ext.SplitButton({
								id: 'cleandirectory', 
							   	text: 'Clean All Directories',
							   	handler: function() {
							   				Ext.Ajax.request({
									    	   url: '/helps/cleandirectory',
											   method : 'GET',
											   success: function(){
											   		Ext.Msg.alert('Clean Helps Directory', 'Helps directory cleaned sucessfully');
											   },
											   failure: function(){
											   		Ext.Msg.alert('Clean Helps Directory', 'Helps directory cleaned failed');
											   },
											   params: { share_type : 'ALL'}
											});}, // handle a click on the button itself
							   	menu: new Ext.menu.Menu({
							        items: [
							        	// these items will render as dropdown menu items when the arrow is clicked:
								        {
									        text: 'Clean Shared Directory', 
									        handler: function() {
									        	Ext.Ajax.request({
										    	   url: '/helps/cleandirectory',
												   method : 'GET',
												   success: function(){
												   		Ext.Msg.alert('Clean Helps Directory', 'Helps directory cleaned sucessfully');
												   },
												   failure: function(){
												   		Ext.Msg.alert('Clean Helps Directory', 'Helps directory cleaned failed');
												   },
												   params: { share_type : 'PUBLIC'}
												});
									        	
									        }
								        },{
									        text: 'Clean Company Directory', 
									        handler: function() {
										        Ext.Ajax.request({
										    	   url: '/helps/cleandirectory',
												   method : 'GET',
												   success: function(){
												   		Ext.Msg.alert('Clean Helps Directory', 'Helps directory cleaned sucessfully');
												   },
												   failure: function(){
												   		Ext.Msg.alert('Clean Helps Directory', 'Helps directory cleaned failed');
												   },
												   params: { share_type : 'PRIVATE'}
												});
									        }
								        }
							        ]
							   	})
							})]
	});
	
	this.adopthelptree_l = new BloneyHelp.ContentPanel({	id : 'adopthelptree_l',
														height: (config.height - 160),
														border : true,
														bodyBorder : true,
														checked : true});
	this.adopthelptree_l.on('click', this.onClick, this.adopthelptree_l);
	
	this.adopthelptree = new BloneyHelp.ContentPanel({	id : 'adopthelptree',
														height: (config.height - 160),
														border : true,
														bodyBorder : true,
														checked : true});
	this.adopthelptree.on('click', this.onClick, this.adopthelptree);
	
	this.adopthelpsfrm = new Ext.FormPanel({
		frame:true,
		id : 'adopthelpfrm',
		title: 'Adopt Helps Directory',
		//height : 290,
		autoHeight : true,
		autoWidth : true,
		listeners: {activate: this.handleActivate},
		items:[
				{
					xtype:"hidden",
					id:'adopthelpsfrm_id'
				},{
					xtype:"combo",
					fieldLabel:"Comapnies list",
					width : 200,
					store: this.helpssharelist,
					displayField:'company_name',
					valueField: 'company_name',
					hiddenName: 'company_nameId',
					typeAhead: true,
					id:'cs_company_name',
					mode: 'local',
					triggerAction: 'all',
					emptyText:'Select a comapny ...',
					selectOnFocus:true,
					allowBlank:false
				},{xtype : 'hidden', id : 'filler'},{
				layout:'column',
				border:false,
				items:[
					{
						columnWidth: 0.5,
						layout: 'form',
						defaults: {width: 300}, 
						autoScroll : true,
						items:[
							this.adopthelptree_l	
						]
					},{
						columnWidth: 0.5,
						layout: 'form',
						defaults: {width: 300}, 
						autoScroll : true,
						items:[
								this.adopthelptree
						]
					}
				]
			}
		  ],
		  bbar:['->',{
				text:"Clean All",
				handler : function () {
					Ext.getCmp('adopthelpfrm').form.setValues( [ {id:'cs_company_name', value:''}]);
        			
				}
			},'-',{
				text:"Adopt Helps Directory",
				handler : function () {
						var selItems = Ext.getCmp('adopthelpfrm').getSelectionModel().getSelections();
						var itemsList = "";
						for(var i = 0, n = selItems.length; i < n; i++) {
					     	itemsList = ((itemsList == "") ? "," : (itemsList + ",") ) + selItems[i].id
							itemsList += ((i == n-1) ? "," :  "");
					    }
						Ext.Ajax.request({
										   url: '/helps/adoptdirectory',
										   method : 'GET',
										   success: function(){
										   		Ext.Msg.alert('Post Helps Directory', 'Helps directory posted sucessfully');
										   },
										   failure: function(){
										   		Ext.Msg.alert('Post Helps Directory', 'Helps directory posted failed');
										   },
										   params: {customer_name : Ext.getCmp('cs_company_name').getValue(),
										   			items_list : itemsList}
										});	
						
				}
			}]
	});
	
	this.collaboratetabs = new Ext.TabPanel({
				region: 'center',
				margins:'3 3 3 0',
				autoScroll:true,
				id: 'help_collaborate_tabs',
				items:[
					this.posthelptreefrm,
					this.adopthelpsfrm
				]
			});
	
	BloneyHelp.CollaborateWnd.superclass.constructor.call(this, {
		title : 'Bloney Helps Collaborate',
		id: 'wndbloneyhelpcollaborate',
		modal : true,
		width : config.width,
		height : config.height,
        items: [this.collaboratetabs],
		buttons: [{
				text: 'Close Help Collaborate Window',
				handler : function() {
					Ext.getCmp('wndbloneyhelpcollaborate').close();
				}
			}]
		});
		
	this.posthelptree.expandAll();
	Ext.getCmp('cs_company_name').on('select', this.onSelectCN, this);
	
};

Ext.extend(BloneyHelp.CollaborateWnd, Ext.Window,{
	
	handleActivate : function(tab){
		tab.doLayout();		
	},
	
	onClick : function(node, e){
		e.preventDefault();
		Ext.getCmp('posthelptreefrm').form.setValues( [{id:'ctext', value:node.attributes.text},
									  {id:'cdescription', value:node.attributes.description},
									  {id:'ccontent', value: node.attributes.content}]);
	}
});

BloneyHelp.MainWnd = function(config){
	
	Ext.apply(this, config);
	
	var content = new BloneyHelp.ContentPanel({id:'help-tree',
        									   title : 'Content',
        									   checked : false});
    content.on('dblclick', function(node, e){
         if(node.isLeaf() && node.attributes.link){
            e.stopEvent();
            main.loadClass(node.attributes.link, node.attributes.text);
            Ext.getCmp('wndbloneyhelp').updateDetails(node);
         }
    });
    
	var main = new BloneyHelp.MainPanel();
	main.on('tabchange', function(tp, tab){
        content.selectClass(tab.cclass); 
    });
    
	var search = new BloneyHelp.SearchPanel();
	
	var navigator = new Ext.TabPanel({
			region: 'west',
			margins:'3 1 1 1',
			id: 'navigator',
	        activeTab: 0,
	        tabPosition : 'bottom',
	        width : 250,
	        autoScroll:true,
			items : [content,search]
		}
	);
	
    
    
    
	var edit = new Ext.form.FormPanel({
		region : 'south',
		height : 220,
		id : 'help_editor',
		layout : 'form',
		margins:'1 1 1 1',
		title : 'Help Topic Editor',
		url: '/helps/update',
		items : [
			{
				layout:'column',
				border:false,
				items:[
					{
						columnWidth: 0.5,
						layout: 'form',
						defaults: {
							width: 250,
							margins:'10 10 10 10'				
						},
						border : false,
						items:[
							{
								xtype:"hidden",
								id:'id'
							},{
								xtype:"textfield",
								id:'text',
								fieldLabel:"Topic",
								name:"text",
								allowBlank:false
							},{
								xtype:"textarea",
								id:'description',
								width: 250,
								height : 120,
								fieldLabel:"Description",
								name:"description",
								allowBlank:true
							}
						]
					},{
						columnWidth: 0.5,
						layout: 'form',
						defaults: {width: 150},
						border : false,
						items:[
							{
								xtype:"textarea",
								id:'content',
								width: 250,
								height : 150,
								fieldLabel:"Content",
								name:"content",
								allowBlank:true
							}
						]
					}
				]
			}
		],
		buttons : [{
				text: 'Submit',
				handler : function() {
					Ext.getCmp('help_editor').getForm().submit({
								waitMsg:'Updating the Help Topic...',
								reset:true,
								method:'POST',
								success:function(f,a){									    
										if(a && a.result){
											Ext.getCmp('Help_'+ a.result.element_name).getUpdater().refresh();
											var node  = Ext.getCmp('help-tree').getNodeById(a.result.element_id);
											node.attributes.text = a.result.element_name;
											node.attributes.description = a.result.element_desc;
											node.attributes.content = a.result.element_content;
											Ext.getCmp("wndbloneyhelp").updateDetails(node);
									}
								},
								failure : function(f,a){									
									if(a && a.result){										
										Ext.example.msg('Help', '{0}.</br>Bloney Cashflow ', a.result.notice);
									}
								}
							});
				}
			},{
				text: 'Close Editor',
				handler : function() {
					Ext.getCmp('help_editor').hide();
					Ext.getCmp('wndbloneyhelp').doLayout();
				}
			}
	    	]
		
	});
	
    var head = new Ext.Panel({
        border: false,
        layout:'anchor',
        region:'north',
        cls: 'docs-header',
        height:27,
        items: [
       		new Ext.Toolbar({
            cls:'top-toolbar',
            items:[' ',
	            new Ext.Button({
	            	id : 'button-home',
	            	iconCls: 'icon-home',
	            	tooltip: 'Welcome',				   	
				   	handler: function(){ main.setActiveTab(0);  }
				}),' ', '-',' ',
				{
	                iconCls: 'icon-expand-all',	               
					tooltip: 'Expand All',
	                handler: function(){ content.root.expand(true); }
	            }, '-', {
	                iconCls: 'icon-collapse-all',	                
	                tooltip: 'Collapse All',
	                handler: function(){ content.root.collapse(true); }
	            },'-',{
	            	iconCls: 'icon-edit',
	                tooltip: 'Edit Topic',
	                handler: function(){ 
	                	Ext.getCmp('help_editor').show();
	                	Ext.getCmp('wndbloneyhelp').doLayout();
	                }
	            }, '->',
				'Search: ', ' ',
                new Ext.ux.SelectBox({
                    listClass:'x-combo-list-small',
                    width:90,
                    value:'text',
                    id:'search-type',
                    store: new Ext.data.SimpleStore({
                        fields: ['text'],
                        expandData: true,
                        data : ['text', 'description', 'content']
                    }),
                    displayField: 'text'
                }), ' ',
                new BloneyHelp.SearchField({
	                width:240,
					store: main.searchStore,
					paramName: 'q'
	            })
            ]
        })]
    });

	BloneyHelp.MainWnd.superclass.constructor.call(this, {
		title : 'Bloney Help',
		id: 'wndbloneyhelp',
       	items: [head,main,navigator,edit],
    	buttons : [
    		new Ext.SplitButton({
				id: 'button-helps', // the container id
			   	text: 'Collaborate',
			   	//handler: optionsHandler, // handle a click on the button itself
			   	menu: new Ext.menu.Menu({
			        items: [
				        	// these items will render as dropdown menu items when the arrow is clicked:
					        {text: 'Publish Helps Directory', handler: function() {
					        	var helpsCollaborateWnd = new BloneyHelp.CollaborateWnd({
					        										width: Ext.getCmp('help-body').getSize().width ,
					        										height:Ext.getCmp('help-body').getSize().height });
					        	position  = Ext.getCmp('help-body').getPosition();
					        	helpsCollaborateWnd.setPosition(position[0],position[1]);
					        	Ext.getCmp('help_collaborate_tabs').setActiveTab(0);
					        	helpsCollaborateWnd.show();
					        	
					        }},
					        {text: 'Adopt Helps Directory', handler: function() {
						        var helpsCollaborateWnd = new BloneyHelp.CollaborateWnd({
					        										width:Ext.getCmp('help-body').getSize().width ,
					        										height:Ext.getCmp('help-body').getSize().height });
					        	
					        	position  = Ext.getCmp('help-body').getPosition();
					        	helpsCollaborateWnd.setPosition(position[0],position[1]);
					        	Ext.getCmp('help_collaborate_tabs').setActiveTab(1);
					        	helpsCollaborateWnd.show();
					        }},
							{text: 'Ask for Helps Directory', handler: function() {
						        var notificationCommmentWnd = new BloneyNotifications.CommentWnd();
						        notificationCommmentWnd.show();
					        }}
				        ]
			   	})
			}),{
				text: 'Close Bloney Help Window',
				handler : function() {
					Ext.getCmp('wndbloneyhelp').close();
				}
			}
    	]
	});
	
	Ext.getCmp('help_editor').hide();
	//Ext.getCmp('wndbloneyhelp').doLayout();
};

Ext.extend(BloneyHelp.MainWnd, Ext.Window,{
	
	updateDetails : function(node) {
			Ext.getCmp('help_editor').form.reset();
			Ext.getCmp('help_editor').form.setValues( 
									[ {id:'text', value:node.attributes.text},
									  {id:'description', value:node.attributes.description},
									  {id:'id', value:node.attributes.id},
									  {id:'content', value:node.attributes.content}
									 ] );
		}
});


// ---------------------------------
// Bloney Toolbar main
// ---------------------------------
BloneyToolbar = function(config){
	
	Ext.apply(this, config);
	
	BloneyToolbar.superclass.constructor.call(this,{
							region:'north',
							id:'bloneytoolbar',
							height:28
							});


};

Ext.extend(BloneyToolbar, Ext.Toolbar,{

	renderToolbar: function(){

		this.add({
			xtype : 'tbbutton',
			text: 'Bloney Cashflow',
			enableToggle: false,
			pressed: false,
			handler : this.bloneySplash
		});

		this.addFill();
		this.addSpacer();
		this.add({
				xtype : 'tbbutton',
				text: 'Contacts',
				enableToggle: false,
				pressed: false,
				id:'company-menu',
				cls:'reading-menu',
				width:200,
				handler : function(){
						var bloneyCompaniesWin = new BloneyCompany.MainWnd(toolbarconfig);	
						Ext.getCmp('company_tabs').setActiveTab('my_companies');
						bloneyCompaniesWin.show();
					}
		});
		
		this.addSpacer();
		this.add({
				xtype : 'tbbutton',
				text: 'Accounts',
				enableToggle: false,
				pressed: false,
				id:'accounts-menu',
				handler : function(){
									var bloneyAccountWin = new BloneyAccount.MainWnd(toolbarconfig);
									Ext.getCmp('accounts_tabs').setActiveTab('accounts_form');
									bloneyAccountWin.show();
								}
				/*menu:{
				id:'account-menu',
				cls:'reading-menu',
				width:135,
				items: [
						{
							text: 'Banks',
							handler : function(){
									var bloneyAccountWin = new BloneyAccount.MainWnd();
									Ext.getCmp('accounts_tabs').setActiveTab('bankstab');
									bloneyAccountWin.show();
								}
						},{
							text: 'Accounts',
							handler : function(){
									var bloneyAccountWin = new BloneyAccount.MainWnd();
									Ext.getCmp('accounts_tabs').setActiveTab('saccountstabs');
									bloneyAccountWin.show();
								}
						},{
							text: 'Virtual Accounts',
							handler : function(){
									var bloneyAccountWin = new BloneyAccount.MainWnd();
									Ext.getCmp('accounts_tabs').setActiveTab('vaccountstab');
									bloneyAccountWin.show();
								}
						}]
			}*/
		});
		this.addSpacer();
		this.add({
					xtype : 'tbbutton',
					text: 'People',
					enableToggle: false,
					pressed: false,
					id:'people-menu',
					width : 200,
					handler :  function(){
								var bloneyPeopleWin = new BloneyPeople.MainWnd(toolbarconfig);	
								bloneyPeopleWin.show();
							}
		});
		
		this.addSpacer();
		this.add({
					xtype : 'tbbutton',
					text: 'Help',
					id:'helps-menu',
					enableToggle: false,
					pressed: false,
					width : 200,
					handler : this.bloneyHelp
		});

		this.addSpacer();
		this.add({
					xtype : 'tbbutton',
					text: 'Sign Out',
					id:'signout-menu',
					enableToggle: false,
					pressed: false,
					handler : function(){						
						Ext.Ajax.request({
						   		url: '/authorize/logout',
						   		waitMsg:'Please Wait...',
								method:'GET',
								success:function(f,a){
										if(a){
											Ext.example.msg('Sign Out', 'Thank you. Bloney Cashflow.');
										    document.location = a.url;											
										    document.location.reload(true);										    
									}
								},
								failure : function(f,a){
									if(a && a.result){
										Ext.example.msg('Sign Out', 'Failed to sign out since {0}', a.notice);
									}
								}
						});
					}
		});

	},

	bloneySplash : function(){
		var bloneySpalshWin;
		if(!bloneySpalshWin) 
		{
			bloneySpalshWin = new BloneySplash.MainWnd();	
		}
		bloneySpalshWin.show();
	},

	bloneyHelp : function(){
		var bloneyHelpWin = new BloneyHelp.MainWnd(toolbarconfig);
		bloneyHelpWin.show();
	}
});